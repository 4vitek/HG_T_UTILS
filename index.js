"use strict";
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////UTILS/////////////////////////Victor Rodniansky///////18/08/2019///////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
const MongoClient = require('mongodb').MongoClient;
const {ObjectId} = require('mongodb'); // or ObjectID 
const XLSX = require('xlsx');
const fs = require('fs');
const fsE = require('fs-extra')
const shell = require('shelljs');
const copydir = require('copy-dir');
const yargs = require('yargs');
const chalk = require('chalk');
const _ = require('lodash');
const pass = "1";
const userName = "server";
const dbName = "HG_Tofes";
const prodHost = "10.20.100.71";
const ptHost = "10.20.100.73";
const StageHost = "10.20.100.72";
const localHost = "localhost";
const matnasHost= "10.20.100.74";
let UPLOADS_PATH;
var GLOBAL_COUNT = 0;
let  path2 = require('path');
//Command line (CLI)
console.log("\n---------------HG_T_UTILS---------------------------------");
const argv = yargs
    .option('findDbl', {
        alias: 'f',
        description: 'finds double users in different companies and copies attachments',
    })
    .option('showDbl', {
        alias: 'sh',
        description: 'counts double users in different companies',
    })
    .option('prod', {
        alias: 'p',
        description: 'production mode',
    })
    .option('stage', {
        alias: 'stg',
        description: 'preprod mode',
    })
    .option('pt', {
        alias: 'pt',
        description: 'for security',
    })
    .option('matnas', {
        alias: 'mtn',
        description: 'matnas mode',
    }).option('showdmgchld', {
        alias: 'shD',
        description: 'show damaged itemRows (children)',
    }).option('fixdmgchld', {
        alias: 'fDch',
        description: 'fix damaged itemRows (children)',
    }).option('showCity', {
        alias: 'shC',
        description: 'show cities',
    }).option('fixCity', {
        alias: 'tr',
        description: 'Trims cities which are written with space',
    }).option('distinctCities', {
        alias: 'dc',
        description: 'find problematic cities',
    }).option('chngeToCode', {
        alias: 'cht',
        description: 'change users text to code',
    }).option('fixTextForms', {
        alias: 'ffx',
        description: 'fix text in forms',
    }).option('fixCodeForms', {
        alias: 'fxfc',
        description: 'fix code in forms',
    }).option('traverseForms', {
        alias: 'tF',
        description: 'traverse forms',
    }).option('fixIashuvMezake', {
        alias: 'fxM',
        description: 'fix mezake',
    }).option('fixIashuvMizakeCodes', {
        alias: 'fyc',
        description: 'fix mezake to codes',
    }).option('showWrongMates', {
        alias: 'shWm',
        description: 'shows mates that are wrong (booleans)',
    }).option('updateWrongMates', {
        alias: 'updWm',
        description: 'shows mates that are wrong (booleans)',
    }).option('initFirstMessage', {
        alias: 'initF',
        description: 'clear first message indication',
    }).option('eml', {
        alias: 'insMail',
        description: 'email stub',
    }).option('removeFirstWorker', {
        alias: 'rmF',
        description: 'removes first year worker',
    }).option('initPass', {
        alias: 'iP',
        description: 'initiates user password in specific company',
    }).option('correctDamagedFiles', {
        alias: 'shwDF',
        description: 'correct files which differ from db',
    }).option('viewDamagedFiles', {
    alias: 'vDF',
    description: 'show files which differ from db',
    }).option('isValidNumberTown', {
        alias: 'iVal',
        description: 'shows cities which not code',
    }).option('showUserTowns', {
        alias: 'shTwn',
        description: 'shows cities for users',
    }).option('unlockUsers', {
        alias: 'unlock',
        description: 'unlock users with 10 unsuccessful atempts',
    }).option('deleteUsersBankData', {
        alias: 'dlBnk',
        description: 'delete bankData',
    }).option('swapStrNum', {
        alias: 'swNum',
        description: "swaps street with '\\' symbol ",
    }).option('findUserNamesOfCompany', {
        alias: 'uC',
        description: "finds userNames foe windows search",
    }).option('compareSavedFilesFolders', {
        alias: 'cFF',
        description: "check Chens program",
    }).option('deleteCompany', {
        alias: 'dCmp',
        description: "delete company and all around it",
    }).option('setUserToActive', {
        alias: 'stActv',
        description: "set users to be active",
    }).option('copyFormToUser', {
        alias: 'cpFu',
        description: "copies form user data to user",
    }).option('findLockedUsersInState', {
        alias: 'fstL',
        description: "find locked users in state of form",
    }).option('findFormStatesinCompany', {
        alias: 'fndFormSt',
        description: "find forms state count in each company",
    }).option('findSmsLogPerCompany', {
        alias: 'smsLg',
        description: "find sms log count in each company",
    }).option('findAprovedUserData', {
        alias: 'fApr',
        description: "find aproved user data",
    }).option('updTaarichThilatAvoda', {
        alias: 'updTh',
        description: "update taarichThilatAvoda",
    }).option('deleteUsersByExtId', {
        alias: 'delUId',
        description: "delete users and their forms by externalId",
    }).option('deleteUsersByStatus', {
        alias: 'delUStatus',
        description: "delete users and their forms by status",
    }).option('stringCities', {
        alias: 'strCit',
        description: "shows cities with strings and fixes it",
    }).option('stringFormCities', {
        alias: 'strCitForm',
        description: "shows forms cities with strings and fixes it",
    })

    
    .help()
    .alias('help', 'h')
    .argv;
///Chooses DB host///////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
let choseHost = ()=>{
    let host = localHost;
    UPLOADS_PATH = `C:/Users/victor/Documents/Infra/HargalWeb/Source/uploads`;
    if (argv.prod) {
        host = prodHost;
        UPLOADS_PATH = `D:/Service/eForms/uploads`;
    }
    if (argv.stage) {
        host = StageHost;
        UPLOADS_PATH = `D:/Service/eForms/uploads`;
    }
    if (argv.pt) {
        host = ptHost;
        UPLOADS_PATH = `D:/Service/eForms/uploads`;
    }
    if (argv.matnas) {
        host = matnasHost;
        UPLOADS_PATH = `D:/Service/eForms/uploads`;
    }
    return host;
}
let fixUsers = async (database)=>{
    let users = await database.collection('users').find({}).toArray();
    let cities = await database.collection('cities').find({}).toArray();
    for (let i = 0; i < users.length; i++) {
        if(users[i].employeeData && users[i].employeeData.addressData && users[i].employeeData.addressData.city){
            let cityObj = cities.find(c=>c.cityName == users[i].employeeData.addressData.city);
            if(cityObj){
                await database.collection('users').updateOne({_id:users[i]._id}, {$set: {'employeeData.addressData.city':cityObj.cityCode }});
                console.log(`${users[i].userName} updated with city code ${cityObj.cityCode}`);
            }
        }
    }
    console.log("DONE");
}
let fixTextForms = async (database)=>{
    let forms = await database.collection('forms').find({}).toArray();
    console.log(forms.length);
    for (let i = 0; i < forms.length; i++) {
        if(forms[i].formData){
            let formDataObj = JSON.parse(forms[i].formData);
            let city = "";
            if(argv.fixIashuvMezake){
                city = formDataObj.inputYeshuvMezake ? formDataObj.inputYeshuvMezake : "";
            }else{
                city = formDataObj.city ? formDataObj.city : "";
            }
            console.log(city)
            if(!city){
                continue;
            }
            let trimedVal = city.trim();
            switch(trimedVal) {
                case "פתח תקוה":
                    trimedVal = "פתח תקווה";
                  break;
                case "תל אביב":
                case "תל אביב-יפ":
                    trimedVal = "תל אביב-יפו";  
                  break;
                  case "מודיעין עילי":
                    trimedVal = "מודיעין עילית";  
                  break;
                  case "קרית אונו":
                    trimedVal = "קריית אונו";  
                  break;
                  case "קרית ביאליק":
                    trimedVal = "קריית ביאליק";  
                  break;
                  case "קרית גת":
                    trimedVal = "קריית גת";  
                  break;
                  case "הרצלייה":
                    trimedVal = "הרצליה";  
                  break;
                  case 'פ"ת':
                        trimedVal = "פתח תקווה";  
                  break;
                  case "אום אל-פחם":
                        trimedVal = "אום אל פחם";  
                  break;
                  case "נהרייה":
                        trimedVal = "נהריה";  
                  break;
                  case "פרדס חנה":
                        trimedVal = "פרדס חנה-כרכור";  
                  break;
                  case 'ראשל"צ':
                  case 'ראשון לציו':
                        trimedVal = "ראשון לציון";  
                  break;
                  case "גני תקוה":
                        trimedVal = "גני תקווה";  
                  break;
                  case "קרית מוצקין":
                        trimedVal = "קריית מוצקין";  
                  break;
                  case "קרית מלאכי":
                        trimedVal = "קריית מלאכי";  
                  break;
                  case "קרית אתא":
                        trimedVal = "קריית אתא";  
                  break;
                  case "קרית ים":
                        trimedVal = "קריית ים";  
                  break;
                  case "מודעין עילית":
                        trimedVal = "מודיעין עילית";  
                  break;
                  case 'ב"ב':
                        trimedVal = "בני ברק";  
                  break;
                  case 'דיר אל אסד':
                        trimedVal = "דיר אל-אסד";  
                  break;
                  case "מודעין עילית":
                        trimedVal = "מודיעין עילית";  
                  break;
                  case 'בת-ים':
                        trimedVal = "בת ים";  
                  break;
                default:         
                  // code block
              }
              if(argv.fixIashuvMezake){
                console.log(`${forms[i]._id} text fixed`);
                console.log(`${forms.length}  fixed`);
                formDataObj.inputYeshuvMezake = trimedVal;
              }else{
                console.log(`${forms[i]._id} text fixed`);
                console.log(`${forms.length}  fixed`);
                formDataObj.city = trimedVal;
              }
              await database.collection('forms').updateOne({_id:forms[i]._id}, {$set: {'formData':JSON.stringify(formDataObj)}});
        }
    }
    console.log(`Done`);
}
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////fixFormsCodes///////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
let fixFormsCodes = async (database)=>{
    let forms = await database.collection('forms').find({'companyId':ObjectId("5c4d59247f7bdc088cca1eed")}).toArray();
    let cities = await database.collection('cities').find({}).toArray();
    for (let i = 0; i < forms.length; i++) {
        let formDataObj = JSON.parse(forms[i].formData);
        let city = "";
        if(argv.fixIashuvMizakeCodes){
            city = formDataObj.inputYeshuvMezake ? formDataObj.inputYeshuvMezake : "";
        }else{
            city = formDataObj.city ? formDataObj.city : "";
        }
        if(formDataObj && city){
            let cityObj = cities.find(c=>c.cityName == city);
            if(cityObj){
                if(argv.fixIashuvMizakeCodes){
                    formDataObj.inputYeshuvMezake = cityObj.cityCode;
                }else{
                    formDataObj.city = cityObj.cityCode;
                    formDataObj.cityText = cityObj.cityName;
                }
                await database.collection('forms').updateOne({_id:forms[i]._id}, {$set: {'formData':JSON.stringify(formDataObj)}});
                console.log(`${forms[i]._id} updated with city code ${cityObj.cityCode}`);
            }
        }
    }
    console.log("DONE");
}

let showWrongMates = async (database)=>{
    let users = await database.collection('users').find({}).toArray();
    let cnt = 0;
    for (let i = 0; i < users.length; i++) {
        if(users[i].employeeData && users[i].employeeData.partnerData && users[i].employeeData.partnerData.isWorking 
            && typeof users[i].employeeData.partnerData.isWorking === "boolean"){
            let partnerDataObj = users[i].employeeData.partnerData;
            console.log(`the mate declaration is ${partnerDataObj.isWorking} at user ${users[i].userName}`);
            ++cnt;
        }
    }
    console.log(cnt);
}
let updateWrongMates = async (database)=>{
    let users = await database.collection('users').find({}).toArray();
    let cnt = 0;
    for (let i = 0; i < users.length; i++) {
        if(users[i].employeeData && users[i].employeeData.partnerData && users[i].employeeData.partnerData.isWorking 
            && typeof users[i].employeeData.partnerData.isWorking === "boolean"){
            let partnerDataObj = users[i].employeeData.partnerData;
            if(partnerDataObj.isWorking){
                partnerDataObj.isWorking = "mateHasSallary";
            }else{
                partnerDataObj.isWorking = "mateNoSallary";
            }
            await database.collection('users').updateOne({_id:users[i]._id}, {$set: {'employeeData.partnerData':partnerDataObj}});
            console.log(`UPDATED: the mate declaration is ${partnerDataObj.isWorking} at user ${users[i].userName}`);
            ++cnt;
        }
    }
    console.log(cnt);
}
//ObjectId("5c4ed5ab6c93a802608f8690")
let initFirstMessage = async (database)=>{//5dc7b3a53603ea130c59a725
    let users = await database.collection('users').find({'employeeData.companyId':ObjectId("5c4ed5ab6c93a802608f8690")}).toArray();
    for (let i = 0; i < users.length; i++) {
        await database.collection('users').updateOne({_id:users[i]._id}, {$set: {'isFirstMessageSent':false}});
    }
}

let eml = async (database)=>{
    //
    let cnt = 0;
    let users = await database.collection('users').find({'employeeData.companyId':ObjectId("5e2d4ee3ad63b71148a0e156"),externalId: { $in: 
        [
         "1431647","1567994","2241035","2243656","2273212","2276843","2277720","2507460","2525661","2682100","2701724","2811913","2881498","3244259","3226737","3822263","3870386","4036124","5121269","5431925","5793224","5835603","5907493","5920141","6012251","6051720","6729034","6729035","6729961","6875342","6998979","14348965","6987341","20019310","20056008","20128335","20455464","20428134","20435680","20545560","20556544","20437202","20558268","20560232","20682874","20713787","20694536","20752015","20756329","20789802","20847008","20881626","20923587","20926224","20930198","20937415","21209618","27029883","30184630","30185157","30382129","30501534","30459407","30556448","30857525","30910833","31151368","31466162","31252971","31538483","31550147","31558011","31628969","31659107","31494389","31511942","31832698","31612299","31729833","31895149","31925673","31864114","32117129","32731472","33150165","1431647","2241035","2273212","2811913","6729034","6875342","14348965","20455464","20428134","27029883","1184362","1241387","2258968","2527880","2780129","2873900","2869929","2903913","3174317","3881752","3859141","3961637","3957375","5044687","5134578","5418183","5649267","5667179","5771906","5740416","5830185","5903833","6926007","20587275","20868199","30278991","30553502","31250762","31251982","31348750","31841262","31616051","31952322","32045533","55544829","1659285","2374423","2502552","2507218","3682140","5359354","5453438","5568559","5595294","6475174","6780850","20104157","20404627","20679591","20732033","20761518","30093317","31887297","1442180","1153560","1455565","1458070","1491674","2400170","2685255","2713301","2812702","2867753","2890710","2893257","3318840","3465809","3384806","3606466","5283291","5477448","5970637","6195224","6260024","6992962","20613943","30688191","31556190","31501100","1343382","1562165","2257310","2258691","3287442","5712053","5920006","5969094","6953505","20106974","20143374","20373708","20756407","30278439","30248372","30788888","30809484","30959733","30978906","31104097","31554552","59249086","2235785","2202779","2417568","2447663","2884080","3377302","3494082","3836535","3957542","4053643","5468565","5664196","5743517","5827133","5807825","5835678","5813404","5814586","5970639","6729031","6735617","6859149","6994839","6994163","20561824","20707081","30277172","30667206","30793505","31105857","31209125","31356693","32104818","1318766","1136270","2180352","2267980","2401779","3621734","4268203","5212922","5830465","5810757","5867992","5870276","5927613","6166834","6566996","6317506","6789688","6956138","20056466","20095353","20720573","30855075","31538332","31555755"   
        ]} }).toArray();
    //let users = await database.collection('users').find({'employeeData.companyId':ObjectId("5dc7b3a53603ea130c59a725"),'employeeData.email':{ $exists: false }}).toArray();
    for (let i = 0; i < users.length; i++) {
        console.log(`UPDATED: the user ${users[i].userName}`);
        await database.collection('users').updateOne({_id:users[i]._id}, {$set: {'employeeData.email':'yullaa1812@gmail.com'}});
        cnt++;
    }
    console.log(`${cnt} users were updated`);
}

let removeFirstWorker = async (database)=>{
    let cnt = 0;
    let users = await database.collection('users').find({'employeeData.companyId':ObjectId("5e2d4ee3ad63b71148a0e156")}).toArray();
    for (let i = 0; i < users.length; i++) {
        console.log(`UPDATED: the user ${users[i].userName}`);
        await database.collection('users').updateOne({_id:users[i]._id}, {$set: {'isFirstYearWorker101':false}});
        cnt++;
    }
    console.log(`${cnt} users were updated`);
}

let deleteUsersByStatus = async (database)=>{
    let forms = await database.collection('forms').find({"formState":"new","companyId":ObjectId("5df9f381ecb01806903a855b")}).toArray();
    let idArr = [];
    if(forms && forms.length > 0){
        idArr = forms.map(f=>f.employeeId);
    }
    let usersArr =  await database.collection('users').find({"employeeData.companyId":ObjectId("5df9f381ecb01806903a855b")}).toArray();
    
    for (let i = 0; i < usersArr.length; i++) {
        let f =  await database.collection('forms').findOne({"employeeId":usersArr[i]._id,"companyId":ObjectId("5df9f381ecb01806903a855b")});
        let fnd = usersArr.findIndex(u=>u === u.employeeId);
        if(!f && fnd < 0){
            idArr.push(usersArr[i]._id);
        }
    }

    let count = 0;
    for (let i = 0; i < idArr.length; i++) {
        try {
            await database.collection('users').deleteOne({'_id':idArr[i],'employeeData.companyId':ObjectId("5df9f381ecb01806903a855b")});
            } catch (e) {
            console.log(e);
            }
            try {
            await database.collection('forms').deleteOne({'employeeId':idArr[i],companyId:ObjectId("5df9f381ecb01806903a855b")});
            } catch (e) {
            console.log(e);
            }
        count++;
        console.log(`user ${idArr[i]} deleted`);
    }
    console.log(`${count} users were deleted`);
    console.log("DONE");
}


let deleteUsersByExtId = async (database)=>{
    let users = await database.collection('users').find({'employeeData.companyId':ObjectId("5de39d6d3603ea130c59b2fb"),externalId: { $in: 
        [
          "3413","3485","3519","5359","6242","9089","9681","9978","11224","11467","11525","12826","15566","16094","16860",
          "16962","16995","17450","18103","18283","19299","19397","19470","20153","20524","20987","22594","24118","24349",
          "25189","25333","25573","25620","25664","25766","26367","27488","27476","27663","27803","27945","27976","28603","28679","29131","29122","29441","29205","29338","29384","29876","30273","30504","30737","30816","30912","31554","31541","31887","32090","32709","32704","33012","33326","33552","33633","33619","33954","34198","34141","34219","34370","34654","35064","35459","35479","35256","35525","35736","35772","35876","35941","36543","36635","36621","37058","37331","37523","37697","38449","38580","39001","39077","39062","39654","39727","40007","40151","40148","40626","40722","40757","40728","40817","40977","41168","41417","41429","41493","41518","41618","41658","41705","41900","41947","42032","42118","42148","42202","42315","42159","42163","42337","42368","42371","42726","42719","42918","42897","43034","43164","43165","43392","43368","43423","43437","43477","43767","43793","44041","44090","44159","44512","44518","44561","44563","44592","44656","44732","44779","44940","44965","45327","45537","45574","45601","45672","45816","45838","45853","45979","46042","46112","46160","46297","46299","46304","46356","46358","46484","46647","46766","46811","46961","47058","47013","47093","47072","47148","47230","47338","47346","47323","47438","47521","47554","47666","47748","47802","47877","47895","47955","47956","49007","49071","49304","49309","49501","49538","49615","49625","49653","60015","60090","60205","60287","60466","60482","60512","60530","60545","60546","60576","60682","60793","60789","60803","60952","60955","60958","60963","60951","61017","61052","61053","61063","61170","61266","61336","61365","61397","61459","7132996","11247715","11953577","13441274","14368328","14828438","15542947","14966436","15379993","15758931","15996374","16983033","16869737","17594565","21566872","21662564","21993241","21833306","22176820","22188734","22474498","22747018","22930648","22825285","23501174","23574296","23557929","24512436","24546301","24451551","25281684","25064874","26380816","26230433","26466763","26378620","27013218","27310135","27818772","27746288","27974088","28145720","28207645","28255867","28749141","28964070","29093580","29142155","29219995","29271756","29971637","31177801","31479017","31722424","31682388","31892029","31941800","32023350","32264400","32388480","32508087","32708406","32728461","32743734","33055658","33074485","33080342","33154386","33545682","34311415","34645309","34423053","34735787","35757939","36070753","36390409","36777035","37646536","37253739","37271517","37353067","38006821","38015558","38309902","38317038","38447371","38617825","39254891","39323514","39283791","39402060","39467121","39550447","39573514","39558796","39667258","39920293","40099921","40186876","40619322","40619405","43242874","43552793","51215077","51644912","52170479","52793148","53044178","54135298","54734462","54984323","56070022","56074081","56669989","57590028","57510208","57773202","58386053","58779083","58481615","59135749","59198812","59263939","61017059","61991865","61256251","64986250","62541735","66038076","66350778","66469461","66440132","66526906","66548637","66623521","66668963","69097657","67339861","69635944","70235189","200049518","200288009","200385912","200436038","200433795","200469997","200561439","200615771","200660272","200689370","200756435","200795128","200885150","201013935","201103785","201278827","201278231","201469459","201490588","201503828","201508496","201623311","203111885","203170030","203176912","203226493","203261995","203275250","203370598","203477138","203495387","203500921","203526751","203633854","203665914","203752670","203763008","203754429","203843487","203843628","203850151","203904156","203909924","203995303","203999669","204162846","204184287","204206163","204208219","204225866","204276190","204277412","204302392","204384044","204375695","204406938","204416283","204426571","204449607","204457956","204503668","204477202","204577779","204581912","204623862","204667463","204675243","204677520","204706337","204896153","204910152","204777577","204858971","205352396","205374028","205448038","205451867","205470214","205516453","205551500","205551443","205564446","205595614","205605751","205607633","205611346","205641210","205716095","205690720","205718307","205732472","205736838","205748825","205737034","205758139","205756166","205798036","205794217","205807134","205839558","205839038","205843006","205844855","205872930","205887342","205908924","205964141","206007940","206027930","206076127","206086993","206089823","206132375","206121592","206149973","206184715","206211237","206209595","206217739","206236150","206243016","206250227","206251357","206322935","206375784","206384802","206391658","206398323","206396632","206407710","206403859","206404402","206404600","206451858","206457897","206456402","206486243","206502338","206500639","206539892","206541633","206551491","206548745","206566069","206614802","206616047","206640310","206640856","206668964","206677684","206691099","206692493","206717670","206733719","206742249","206748881","206746133","206749160","206755514","206757064","206776742","206771750","206788382","206812059","206821746","206833030","206849168","206860496","206879082","206891798","206894065","206925760","206929093","206935751","206997348","206994576","206994675","207003682","207008780","207014622","207054644","207054651","207066846","207089749","207079377","207114620","207135831","207138934","207140062","207139262","207147844","207165390","207191057","207191859","207202151","207209891","207214321","207216672","207219106","207229071","207255670","207279654","207267469","207269259","207318973","207326091","207341447","207341850","207345224","207350570","207351644","207382714","207404054","207410945","207413139","207414434","207420571","207446923","207449588","207462177","207509662","207514225","207493693","207524687","207521352","207551912","207560285","207566563","207600867","207620931","207621764","207650060","207641523","207663519","207707811","207734070","207754631","207779661","207782384","207784240","207801283","207818097","207830696","207823527","207831066","207836420","207831348","207834276","207845165","207848623","207861873","207869041","207876814","207916875","207913484","207933490","207922469","207937459","207937954","207950635","207950585","207958836","207962812","207987090","207973108","207986076","207994104","208026245","208080788","208106179","208125971","208131466","208134882","208144212","208151183","208177543","208181735","208187740","208227082","208313114","208313437","208313072","208313577","208338947","208343103","208426718","208432088","208455121","208471474","208494179","208563858","208550434","208567487","208598748","208514414","208633495","208659193","208670562","208677575","208691220","208680116","208689398","208695494","208717520","208735449","208757344","208779389","208762914","208771014","208836320","208823963","208871541","208923086","208929885","208920298","208988972","208997643","208962209","209000991","209022086","209048610","209050889","209051234","209051507","209070846","209063288","209076389","209077387","209139609","209126176","209126192","209145036","209152891","209171974","209184142","209204403","209209501","209218569","209251081","209253053","209297605","209301316","209332113","209328822","209386978","209404128","209406628","209425248","209433556","209430446","209452119","209454248","209477413","209476472","209486893","209493444","209501642","209505585","209530542","209523471","209527662","209529221","209550110","209637362","209777879","209793249","209961614","211309703","211358130","211313606","211319777","211380928","211401435","211424734","211445283","211472907","211486568","211510052","211515168","211528757","211560230","211578174","211580899","211610365","211582911","211632286","211625314","211646971","211650270","211645254","211693221","211705298","211709605","211724794","211740105","211744073","211747977","211773155","211761085","211837778","211838206","211839212","211840582","211847686","211846803","211865126","211894266","211925995","211941893","211979901","211980602","211981618","211999073","211995170","211997937","212007629","212012793","212012785","212034961","212035430","212030845","212041909","212044630","212064117","212058770","212063440","212079271","212083141","212146328","212156152","212150965","212156616","212145965","212236640","212218093","212272454","212308076","212325872","212297865","212326334","212306799","212383657","212326995","212386874","212328280","212380695","212391312","212454839","212559207","212473045","212525455","212631485","212581391","212666325","212591994","212721898","212724454","212757207","212907224","212758916","212908941","212909055","212917371","212947998","213088081","213257553","213089535","213296114","213439367","213572241","213664295","214492621","214026197","300185576","300206588","300278843","300301967","300362621","300451408","300425881","300491677","300632346","300638509","300648532","300674272","300740511","300867215","300961299","300915295","300936382","300959681","301031787","301133062","301187225","301189403","301235214","301392544","301408829","301460374","301617197","301617999","301767828","301775052","301816815","301826327","301846069","302249800","302718572","302774658","302914775","302836739","303139588","303147755","303170336","303176820","303175517","303260319","303481170","304115900","304802655","304895485","304941776","304990096","305002057","305035164","305057531","305068561","305069817","305091860","305088171","305127805","305207268","305235483","305237778","305301509","305317729","305375099","305440711","305418444","305444291","305461444","305543456","305564064","305603946","305669798","305669996","305715047","305724478","305728412","305763088","305774283","305774929","305794554","305777112","305931305","306884107","307253377","307462770","307697607","307844886",
          "307883264","307885095","307901546","307930446","307930990","307935502","307963405","307976258","307998237","307983338","308027275","308056894","308100593","308124411","308184928","308139369","308141118","308188473","308253285","308312933","308394329","308455724","308457548","308564772","308571595","308520006","308934645","308784982","309110054","308879840","309497840","309391084","309539146","309654069","309707586","309745206","309831691","309855575","310344999","310617246","310883335","311126445","310987029","311153480","311189625","311270680","311221618","311274757","311363105","311364749","311376180","311378954","311382733","311404396","311397780","311445795","311478317","311514582","311518328","311607428","311577811","311683601","311779326","312175235","312182231","312187248","312192909","312185994","312200173","312202484","312218878","312239213","312264328","312250608","312280365","312281322","312342447","312344047","312385636","312576762","312577612","312588858","312801079","313029183","313132755","313145229","313166647","313184665","313185100","313193005","313206583","313207912","313226839","313258030","313282543","313268377","313284309","313342206","313344541","313368201","313412124","313440141","313447906","313456394","313476590","313451197","313510653","313538944","313528580","313554750","313563421","313578346","313697575","313708638","313606709","313681777","313902777","314022898","314100223","314122763","314414459","314445412","314348608","314363417","314627092","314647975","314661802","314663444","314697566","314677550","314710062","314767575","314788274","314809146","314820291","314816513","314841693","314842873","314887845","314896770","314907072","314909219","314956525","314962358","314988304","314991811","315002477","315023127","315044867","315086694","315138016","315157420","315159996","315173674","315160622","315174367","315170977","315176958","315180786","315198044","315200352","315214296","315224279","315236703","315270967","315278549","315287300","315290601","315306233","315290684","315352740","315334318","315358572","315378398","315382655","315384511","315392928","315393058","315403337","315426395","315427013","315418665","315430736","315434365","315435586","315452060","315491282","315494930","315563494","315596593","315633081","315628875","315641712","315651554","315684381","315686535","315705194","315766964","315769364","315777631","315807586","315838078","315863340","315868398","315937474","315940551","315944892","315946038","315982637","316030709","316070911","316058494","316106111","316111319","316118033","316129865","316134832","316131036","316133560","316136597","316156041","316177500","316176437","316203959","316204700","316204726","316210939","316218312","316226893","316230465","316251206","316261585","316285014","316296540","316302678","316315654","316342419","316355270","316367663","316367283","316375807","316392968","316401017","316393032","316412907","316437078","316467547","316457084","316463926","316484534","316505684","316510130","316511559","316520220","316549070","316566199","316560770","316561620","316576008","316595214","316862754","316975044","317249340","317295459","317353126","317324499","317629632","317629368","317722916","317739316","317725018","317800829","317863413","318155686","318158607","318165321","318168606","318175718","318189511","318188570","318198041","318193992","318206430","318212453","318203262","318218492","318239126","318251337","318258936","318279726","318285749","318293339","318299369","318318847","318327244","318345600","318339421","318376506","318389236","318385218","318399722","318417599","318437233","318438538","318463114","318465564","318456159","318465614","318460235","318534021","318540564","318548765","318545027","318572732","318566734","318596202","318608692","318607157","318628021","318712601","318700010","318731189","318719697","318729282","318743283","318787793","318756616","318760881","318805330","318808086","318808805","318820214","318813318","318821436","318826542","318835196","318881448","318882677","318884228","318887353","318892619","318903531","318904513","318907417","318907359","318915451","318952462","318965951","319007571","319011136","319040184","319039442","319043527","319047031","319062485","319065405","319119616","319123162","319140083","319133732","319144168","319144382","319146221","319506952","319431797","319507521","320546211","320556871","320605892","320667215","320678329","320759673","321186025","321123242","321231623","321543035","321550477","321792186","322008632","322244419","322183948","322265687","322278060","322320086","322352980","322295189","322374166","322354762","322416702","322567280","322610502","322645953","322642596","322660036","322676990","322686650","322782061","322872912","322877077","322896382","322884610","322897323","322891342","322913021","322937061","322963133","322971441","322963869","322978297","323016832","323037614","323041269","323045153","323054510","323045484","323048413","323057687","323096255","323067298","323074344","323355057","323461160","323509406","323701086","323649582","323807875","323844399","323819359","323844837","323846113","323840462","323889667","323890202","323849307","323899872","323946319","323903666","323954453","323977264","323959981","324044783","324008937","324011394","324029529","324087170","324088541","324086669","324104033","324153972","324131077","324156819","324162569","324207463","324218866","324181932","324232602","324232727","324258300","324260710","324302876","324328210","324354760","324340298","324693753","324631365","324742014","324816586","324816842","324821032","324818558","324820349","324832807","324858661","324904697","324944966","324872571","325000933","325001444","325094654","325004091","325200012","325437085","325250611","325614584","325269512","326839347","326806809","327150314","327206975","327245866","327294294","327274528","327407557","328645502","328623756","328625736","328667753","328736491","328686035","328686878","328944780","328999826","329010508","329631899","329913974","329771307","330501578","332457159","332494137","332516236","333813483","336135512","337788319","337693170","340919141","342532017","342766870","345234496","345246698","305687824","36603","29880","30803","19442","33470","34994","35109","16468","29105","38478","38653","40073","47465","47607","47833","42989","45603","46267","12281671","21824114","22293849","60889","22708432","61276","26515924","28885630","26547000","28889798","31415581","31711526","32503963","32779233","34025007","35744432","37033768","36478535","38202198","38147567","39140645","40102725","39698782","51100618","56071954","58389289","58695024","58785239","61239414","66358268","200933000","203546932","203407762","203573134","203576673","203473186","203921655","203637384","204114292","204234603","204259758","205425390","204686695","205604267","205468473","205610488","205560550","206023343","206142853","206150195","206166209","206310690","206258048","206365751","206392029","206403289","206512451","206512899","206743882","206822660","206854945","207012253","207064577","207079567","207088576","207137217","207380825","207360280","207364092","207442583","207465972","207795014","207850702","207876467","207855438","208140798","208282202","208298216","208252577","208470716","208510727","208913947","208946947","208891499","209092329","209105592","209145754","209245067","209264381","209260363","209296730","209308295","209303577","209337518","209401116","209353622","209407097","209483098","210037156","209955509","211532064","211561048","211573506","211579990","211649561","211661384","211728399","211752431","211951454","212023477","211981402","212044937","212125157","212220305","212149066","212282461","212323380","212572069","212334858","212574206","212574735","212634968","212603708","212636641","212632723","212700462","212704308","212714349","212802466","212829352","212880579","212884977","212960066","212919427","212975767","212989651","212989123","213024375","213027865","213049836","213152077","213072788","213171457","213074107","213198807","213216906","213402894","213220130","213517386","213248933","213517683","213553746","213655210","213554058","213730021","213556459","213795578","213931470","214039422","213818610","214047524","213890999","214483141","214068967","214525958","214074445","250770087","214076911","301346722","301378204","300816584","302637434","302664925","301782892","302521224","303083927","303887848","304322175","305200925","308147743","307070078","308203967","308036540","308044684","308318807","310275680","308353960","308927334","311039184","310020748","311182745","312165665","312202773","312210214","313149502","313455800","313097750","313711558","313197758","314640459","313266256","313549743","313575136","314743840","314888074","314815226","315015370","315033498","315038828","314950684","315426668","315225615","315668103","315981647","316110394","315976878","316167337","316185487","316577642","316586106","316591007","317924173","316461128","318157062","316575398","318206638","316607563","317847358","318299773","318182441","318606159","318623386","318531456","318676046","318591567","318833431","318752151","318935418","318815107","319568887","320713084","319069597","321716011","322258914","322508391","320769938","322558552","320878762","322580895","322311143","322391541","322791070","322506718","322809823","322860800","322648858","322896069","322732637","322918681","322960618","322930686","323046078","323047928","323406777","323414490","323542902","323536409","324049196","324086529","324116508","324090737","324119007","324095439","324096031","324176320","324262021","324209709","324264548","324253319","324896083","324415785","325048528","324639814","325053361","325057131","324837830","325091213","324861400","325155018","324895069","325192441","325102069","325249522","325141059","325333854","325146934","325338077","325370609","325281202","325423978","325326767","325465359","325326775",
          "325622728","325888741","326889300","326324985","326396462","328596911","329027874","332489160","329032544","336436951","332390061","341045094","341305779","345210876","91","9608","15201","20238","20248","20233","20236","21221","21223","21235","21237","21279","21220","21720","22258","22806","22800","22801","23044","23038","23039","24133","24138","24329","24332","24333","24534","24537","24547","25654","25663","26035","26036","26649","26652","27407","30067","30071","30073","30756","30764","32195","34356","34360","34363","34543","36010","36014","36021","37016","37024","37178","37718","37969","39202","39413","39569","39784","39836","39791","39885","39833","39892","40057","40716","40795","41592","41596","41982","42162","42373","43517","43729","43730","44072","44463","44465","44498","44514","44808","44814","44947","45329","45334","45328","45764","46044","46654","46709","46686","46985","47011","47077","47186","47185","47314","47533","47537","47526","47528","47739","47741","49306","49324","49310","49665","60406","60798","60800","60801","61127","61124","61297","61567","11875283","16777666","21528468","21716097","21612841","21696976","21972401","22792899","23365638","23501737","25647108","26492389","27132976","27337179","27938604","28019891","29626504","31829328","32337370","33086281","33289711","33888512","34826487","36193399","36368835","36421204","37110871","38026274","38152047","38193959","38806238","39367289","40615551","40913956","43152404","43442268","52678885","54979380","55964258","57889446","61238960","64975451","66672940","200177731","200516219","200513927","200546646","201041548","201447968","201634391","203041462","203043054","203112966","203133533","203206578","203424767","203562954","203784251","204023824","204102024","204223945","204277495","204393623","204534762","204646434","204647010","204647036","204670632","205357007","205375074","205377682","205659386","206099376","206111312","206190548","206207573","206208738","206243958","206268070","206307464","206400046","206438467","206566473","206731036","206733834","206740219","206742512","206752925","206824948","206828345","206862013","206875577","206949216","206962920","207064486","207065475","207111139","207139478","207140252","207140377","207146804","207145517","207148206","207257643","207261975","207319138","207321654","207323791","207342353","207343930","207344433","207347139","207347378","207403981","207460965","207506718","207559642","207560418","207648916","207691346","207692476","207806266","207816919","207817222","207822925","207831850","207842618","207955741","207963323","207963505","207970997","207986621","207988312","207986282","208093476","208093450","208094094","208096073","208099648","208124586","208177048","208179234","208178756","208231852","208378802","208482596","208496794","208567271","208739177","208728741","208813873","208820027","208823955","208969121","209001718","209118124","209215250","209279306","209307438","209326602","209356591","209399492","209426147","209454727","209450378","209507235","209613520","211423306","211470703","211490578","211528740","211746342","211824156","212036404","212046692","212118962","212121313","212122634","212158513","212222129","212282297","212283204","300055845","300356292","300623832","302670476","302760780","302797139","303739338","304833346","304834633","305363723","305489312","307988428","308191147","308229822","308410687","310649595","311367866","312084726","312132129","312186356","312556459","312518137","312567423","312581903","312611890","313206864","313256141","313316945","313389678","314408741","314618919","314622754","314618885","314662347","314817743","314840059","314849118","314888389","314888520","314908377","314909912","315012039","315012930","315014159","315014498","315078329","315080598","315136812","315120410","315238105","315288779","315311886","315343657","315384784","315404194","315404319","315445353","315467944","315500561","315503664","315555375","315519611","315556480","315584243","315596981","315597070","315597336","315608018","315633198","315631176","315665034","315708842","315714642","315745927","315774364","315908525","315907675","315923342","315962803","316074889","316129386","316165414","316213362","316232321","316287887","316322775","316385616","316391739","316392018","316416494","316485267","316526508","317047553","317544641","317740066","317812436","317893626","318210127","318216538","318260940","318286382","318290418","318323607","318331014","318403326","318483013","318483518","318526522","318603586","318648243","318692027","318715778","318751864","318753696","318789070","318789146","318789450","318877560","318885332","318934437","318951753","318959558","318991247","320521362","322274226","322259862","322384389","322406273","322409574","322444381","322646662","322720749","322740986","323050047","323054965","323832642","323882654","323941062","324151927","324251016","324626704","327055745","327097515","327118360","327150306","326962982","327029948","328775960","332506534","332356674","332650852","345350045","345407456","130182","130046","130004","130026","130013","130022","28244432","32121170","130133","34823625","56259864","56740707","208249201","301388831","302659081","322505777","37535","32739443","200925907","205842453","206462665","206883803","207259268","207354523","208610691","209061753","209071141","211999487","302564836","308066588","314717257"
        ]} }).toArray();

        if(users.length == 0){
            console.log("no user found");
            return;
        }
        let count = 0;
        for (let i = 0; i < users.length; i++) {
            try {
                await database.collection('users').deleteOne({'_id':ObjectId(users[i]._id),'employeeData.companyId':ObjectId("5de39d6d3603ea130c59b2fb")});
             } catch (e) {
                console.log(e);
             }
             try {
                await database.collection('forms').deleteOne({'employeeId':ObjectId(users[i]._id),companyId:ObjectId("5de39d6d3603ea130c59b2fb")});
             } catch (e) {
                console.log(e);
             }
            count++;
            console.log(`user ${users[i].userName} deleted`);
        }
        console.log(`${count} users were deleted`);
        console.log("DONE");
}

//For ezer me tsion
let initPass = async (database)=>{
    // let users = await database.collection('users').find({'employeeData.companyId':ObjectId("5db68616e876cc0ca872d00a"),externalId: { $in: 
    //     [
    //       "3413","3485","3519","5359","6242","9089","9681","9978","11224","11467","11525","12826","15566","16094","16860",
    //       "16962","16995","17450","18103","18283","19299","19397","19470","20153","20524","20987","22594","24118","24349",
    //       "25189","25333","25573","25620","25664","25766","26367","27488","27476","27663","27803","27945","27976","28603","28679","29131","29122","29441","29205","29338","29384","29876","30273","30504","30737","30816","30912","31554","31541","31887","32090","32709","32704","33012","33326","33552","33633","33619","33954","34198","34141","34219","34370","34654","35064","35459","35479","35256","35525","35736","35772","35876","35941","36543","36635","36621","37058","37331","37523","37697","38449","38580","39001","39077","39062","39654","39727","40007","40151","40148","40626","40722","40757","40728","40817","40977","41168","41417","41429","41493","41518","41618","41658","41705","41900","41947","42032","42118","42148","42202","42315","42159","42163","42337","42368","42371","42726","42719","42918","42897","43034","43164","43165","43392","43368","43423","43437","43477","43767","43793","44041","44090","44159","44512","44518","44561","44563","44592","44656","44732","44779","44940","44965","45327","45537","45574","45601","45672","45816","45838","45853","45979","46042","46112","46160","46297","46299","46304","46356","46358","46484","46647","46766","46811","46961","47058","47013","47093","47072","47148","47230","47338","47346","47323","47438","47521","47554","47666","47748","47802","47877","47895","47955","47956","49007","49071","49304","49309","49501","49538","49615","49625","49653","60015","60090","60205","60287","60466","60482","60512","60530","60545","60546","60576","60682","60793","60789","60803","60952","60955","60958","60963","60951","61017","61052","61053","61063","61170","61266","61336","61365","61397","61459","7132996","11247715","11953577","13441274","14368328","14828438","15542947","14966436","15379993","15758931","15996374","16983033","16869737","17594565","21566872","21662564","21993241","21833306","22176820","22188734","22474498","22747018","22930648","22825285","23501174","23574296","23557929","24512436","24546301","24451551","25281684","25064874","26380816","26230433","26466763","26378620","27013218","27310135","27818772","27746288","27974088","28145720","28207645","28255867","28749141","28964070","29093580","29142155","29219995","29271756","29971637","31177801","31479017","31722424","31682388","31892029","31941800","32023350","32264400","32388480","32508087","32708406","32728461","32743734","33055658","33074485","33080342","33154386","33545682","34311415","34645309","34423053","34735787","35757939","36070753","36390409","36777035","37646536","37253739","37271517","37353067","38006821","38015558","38309902","38317038","38447371","38617825","39254891","39323514","39283791","39402060","39467121","39550447","39573514","39558796","39667258","39920293","40099921","40186876","40619322","40619405","43242874","43552793","51215077","51644912","52170479","52793148","53044178","54135298","54734462","54984323","56070022","56074081","56669989","57590028","57510208","57773202","58386053","58779083","58481615","59135749","59198812","59263939","61017059","61991865","61256251","64986250","62541735","66038076","66350778","66469461","66440132","66526906","66548637","66623521","66668963","69097657","67339861","69635944","70235189","200049518","200288009","200385912","200436038","200433795","200469997","200561439","200615771","200660272","200689370","200756435","200795128","200885150","201013935","201103785","201278827","201278231","201469459","201490588","201503828","201508496","201623311","203111885","203170030","203176912","203226493","203261995","203275250","203370598","203477138","203495387","203500921","203526751","203633854","203665914","203752670","203763008","203754429","203843487","203843628","203850151","203904156","203909924","203995303","203999669","204162846","204184287","204206163","204208219","204225866","204276190","204277412","204302392","204384044","204375695","204406938","204416283","204426571","204449607","204457956","204503668","204477202","204577779","204581912","204623862","204667463","204675243","204677520","204706337","204896153","204910152","204777577","204858971","205352396","205374028","205448038","205451867","205470214","205516453","205551500","205551443","205564446","205595614","205605751","205607633","205611346","205641210","205716095","205690720","205718307","205732472","205736838","205748825","205737034","205758139","205756166","205798036","205794217","205807134","205839558","205839038","205843006","205844855","205872930","205887342","205908924","205964141","206007940","206027930","206076127","206086993","206089823","206132375","206121592","206149973","206184715","206211237","206209595","206217739","206236150","206243016","206250227","206251357","206322935","206375784","206384802","206391658","206398323","206396632","206407710","206403859","206404402","206404600","206451858","206457897","206456402","206486243","206502338","206500639","206539892","206541633","206551491","206548745","206566069","206614802","206616047","206640310","206640856","206668964","206677684","206691099","206692493","206717670","206733719","206742249","206748881","206746133","206749160","206755514","206757064","206776742","206771750","206788382","206812059","206821746","206833030","206849168","206860496","206879082","206891798","206894065","206925760","206929093","206935751","206997348","206994576","206994675","207003682","207008780","207014622","207054644","207054651","207066846","207089749","207079377","207114620","207135831","207138934","207140062","207139262","207147844","207165390","207191057","207191859","207202151","207209891","207214321","207216672","207219106","207229071","207255670","207279654","207267469","207269259","207318973","207326091","207341447","207341850","207345224","207350570","207351644","207382714","207404054","207410945","207413139","207414434","207420571","207446923","207449588","207462177","207509662","207514225","207493693","207524687","207521352","207551912","207560285","207566563","207600867","207620931","207621764","207650060","207641523","207663519","207707811","207734070","207754631","207779661","207782384","207784240","207801283","207818097","207830696","207823527","207831066","207836420","207831348","207834276","207845165","207848623","207861873","207869041","207876814","207916875","207913484","207933490","207922469","207937459","207937954","207950635","207950585","207958836","207962812","207987090","207973108","207986076","207994104","208026245","208080788","208106179","208125971","208131466","208134882","208144212","208151183","208177543","208181735","208187740","208227082","208313114","208313437","208313072","208313577","208338947","208343103","208426718","208432088","208455121","208471474","208494179","208563858","208550434","208567487","208598748","208514414","208633495","208659193","208670562","208677575","208691220","208680116","208689398","208695494","208717520","208735449","208757344","208779389","208762914","208771014","208836320","208823963","208871541","208923086","208929885","208920298","208988972","208997643","208962209","209000991","209022086","209048610","209050889","209051234","209051507","209070846","209063288","209076389","209077387","209139609","209126176","209126192","209145036","209152891","209171974","209184142","209204403","209209501","209218569","209251081","209253053","209297605","209301316","209332113","209328822","209386978","209404128","209406628","209425248","209433556","209430446","209452119","209454248","209477413","209476472","209486893","209493444","209501642","209505585","209530542","209523471","209527662","209529221","209550110","209637362","209777879","209793249","209961614","211309703","211358130","211313606","211319777","211380928","211401435","211424734","211445283","211472907","211486568","211510052","211515168","211528757","211560230","211578174","211580899","211610365","211582911","211632286","211625314","211646971","211650270","211645254","211693221","211705298","211709605","211724794","211740105","211744073","211747977","211773155","211761085","211837778","211838206","211839212","211840582","211847686","211846803","211865126","211894266","211925995","211941893","211979901","211980602","211981618","211999073","211995170","211997937","212007629","212012793","212012785","212034961","212035430","212030845","212041909","212044630","212064117","212058770","212063440","212079271","212083141","212146328","212156152","212150965","212156616","212145965","212236640","212218093","212272454","212308076","212325872","212297865","212326334","212306799","212383657","212326995","212386874","212328280","212380695","212391312","212454839","212559207","212473045","212525455","212631485","212581391","212666325","212591994","212721898","212724454","212757207","212907224","212758916","212908941","212909055","212917371","212947998","213088081","213257553","213089535","213296114","213439367","213572241","213664295","214492621","214026197","300185576","300206588","300278843","300301967","300362621","300451408","300425881","300491677","300632346","300638509","300648532","300674272","300740511","300867215","300961299","300915295","300936382","300959681","301031787","301133062","301187225","301189403","301235214","301392544","301408829","301460374","301617197","301617999","301767828","301775052","301816815","301826327","301846069","302249800","302718572","302774658","302914775","302836739","303139588","303147755","303170336","303176820","303175517","303260319","303481170","304115900","304802655","304895485","304941776","304990096","305002057","305035164","305057531","305068561","305069817","305091860","305088171","305127805","305207268","305235483","305237778","305301509","305317729","305375099","305440711","305418444","305444291","305461444","305543456","305564064","305603946","305669798","305669996","305715047","305724478","305728412","305763088","305774283","305774929","305794554","305777112","305931305","306884107","307253377","307462770","307697607","307844886",
    //       "307883264","307885095","307901546","307930446","307930990","307935502","307963405","307976258","307998237","307983338","308027275","308056894","308100593","308124411","308184928","308139369","308141118","308188473","308253285","308312933","308394329","308455724","308457548","308564772","308571595","308520006","308934645","308784982","309110054","308879840","309497840","309391084","309539146","309654069","309707586","309745206","309831691","309855575","310344999","310617246","310883335","311126445","310987029","311153480","311189625","311270680","311221618","311274757","311363105","311364749","311376180","311378954","311382733","311404396","311397780","311445795","311478317","311514582","311518328","311607428","311577811","311683601","311779326","312175235","312182231","312187248","312192909","312185994","312200173","312202484","312218878","312239213","312264328","312250608","312280365","312281322","312342447","312344047","312385636","312576762","312577612","312588858","312801079","313029183","313132755","313145229","313166647","313184665","313185100","313193005","313206583","313207912","313226839","313258030","313282543","313268377","313284309","313342206","313344541","313368201","313412124","313440141","313447906","313456394","313476590","313451197","313510653","313538944","313528580","313554750","313563421","313578346","313697575","313708638","313606709","313681777","313902777","314022898","314100223","314122763","314414459","314445412","314348608","314363417","314627092","314647975","314661802","314663444","314697566","314677550","314710062","314767575","314788274","314809146","314820291","314816513","314841693","314842873","314887845","314896770","314907072","314909219","314956525","314962358","314988304","314991811","315002477","315023127","315044867","315086694","315138016","315157420","315159996","315173674","315160622","315174367","315170977","315176958","315180786","315198044","315200352","315214296","315224279","315236703","315270967","315278549","315287300","315290601","315306233","315290684","315352740","315334318","315358572","315378398","315382655","315384511","315392928","315393058","315403337","315426395","315427013","315418665","315430736","315434365","315435586","315452060","315491282","315494930","315563494","315596593","315633081","315628875","315641712","315651554","315684381","315686535","315705194","315766964","315769364","315777631","315807586","315838078","315863340","315868398","315937474","315940551","315944892","315946038","315982637","316030709","316070911","316058494","316106111","316111319","316118033","316129865","316134832","316131036","316133560","316136597","316156041","316177500","316176437","316203959","316204700","316204726","316210939","316218312","316226893","316230465","316251206","316261585","316285014","316296540","316302678","316315654","316342419","316355270","316367663","316367283","316375807","316392968","316401017","316393032","316412907","316437078","316467547","316457084","316463926","316484534","316505684","316510130","316511559","316520220","316549070","316566199","316560770","316561620","316576008","316595214","316862754","316975044","317249340","317295459","317353126","317324499","317629632","317629368","317722916","317739316","317725018","317800829","317863413","318155686","318158607","318165321","318168606","318175718","318189511","318188570","318198041","318193992","318206430","318212453","318203262","318218492","318239126","318251337","318258936","318279726","318285749","318293339","318299369","318318847","318327244","318345600","318339421","318376506","318389236","318385218","318399722","318417599","318437233","318438538","318463114","318465564","318456159","318465614","318460235","318534021","318540564","318548765","318545027","318572732","318566734","318596202","318608692","318607157","318628021","318712601","318700010","318731189","318719697","318729282","318743283","318787793","318756616","318760881","318805330","318808086","318808805","318820214","318813318","318821436","318826542","318835196","318881448","318882677","318884228","318887353","318892619","318903531","318904513","318907417","318907359","318915451","318952462","318965951","319007571","319011136","319040184","319039442","319043527","319047031","319062485","319065405","319119616","319123162","319140083","319133732","319144168","319144382","319146221","319506952","319431797","319507521","320546211","320556871","320605892","320667215","320678329","320759673","321186025","321123242","321231623","321543035","321550477","321792186","322008632","322244419","322183948","322265687","322278060","322320086","322352980","322295189","322374166","322354762","322416702","322567280","322610502","322645953","322642596","322660036","322676990","322686650","322782061","322872912","322877077","322896382","322884610","322897323","322891342","322913021","322937061","322963133","322971441","322963869","322978297","323016832","323037614","323041269","323045153","323054510","323045484","323048413","323057687","323096255","323067298","323074344","323355057","323461160","323509406","323701086","323649582","323807875","323844399","323819359","323844837","323846113","323840462","323889667","323890202","323849307","323899872","323946319","323903666","323954453","323977264","323959981","324044783","324008937","324011394","324029529","324087170","324088541","324086669","324104033","324153972","324131077","324156819","324162569","324207463","324218866","324181932","324232602","324232727","324258300","324260710","324302876","324328210","324354760","324340298","324693753","324631365","324742014","324816586","324816842","324821032","324818558","324820349","324832807","324858661","324904697","324944966","324872571","325000933","325001444","325094654","325004091","325200012","325437085","325250611","325614584","325269512","326839347","326806809","327150314","327206975","327245866","327294294","327274528","327407557","328645502","328623756","328625736","328667753","328736491","328686035","328686878","328944780","328999826","329010508","329631899","329913974","329771307","330501578","332457159","332494137","332516236","333813483","336135512","337788319","337693170","340919141","342532017","342766870","345234496","345246698","305687824","36603","29880","30803","19442","33470","34994","35109","16468","29105","38478","38653","40073","47465","47607","47833","42989","45603","46267","12281671","21824114","22293849","60889","22708432","61276","26515924","28885630","26547000","28889798","31415581","31711526","32503963","32779233","34025007","35744432","37033768","36478535","38202198","38147567","39140645","40102725","39698782","51100618","56071954","58389289","58695024","58785239","61239414","66358268","200933000","203546932","203407762","203573134","203576673","203473186","203921655","203637384","204114292","204234603","204259758","205425390","204686695","205604267","205468473","205610488","205560550","206023343","206142853","206150195","206166209","206310690","206258048","206365751","206392029","206403289","206512451","206512899","206743882","206822660","206854945","207012253","207064577","207079567","207088576","207137217","207380825","207360280","207364092","207442583","207465972","207795014","207850702","207876467","207855438","208140798","208282202","208298216","208252577","208470716","208510727","208913947","208946947","208891499","209092329","209105592","209145754","209245067","209264381","209260363","209296730","209308295","209303577","209337518","209401116","209353622","209407097","209483098","210037156","209955509","211532064","211561048","211573506","211579990","211649561","211661384","211728399","211752431","211951454","212023477","211981402","212044937","212125157","212220305","212149066","212282461","212323380","212572069","212334858","212574206","212574735","212634968","212603708","212636641","212632723","212700462","212704308","212714349","212802466","212829352","212880579","212884977","212960066","212919427","212975767","212989651","212989123","213024375","213027865","213049836","213152077","213072788","213171457","213074107","213198807","213216906","213402894","213220130","213517386","213248933","213517683","213553746","213655210","213554058","213730021","213556459","213795578","213931470","214039422","213818610","214047524","213890999","214483141","214068967","214525958","214074445","250770087","214076911","301346722","301378204","300816584","302637434","302664925","301782892","302521224","303083927","303887848","304322175","305200925","308147743","307070078","308203967","308036540","308044684","308318807","310275680","308353960","308927334","311039184","310020748","311182745","312165665","312202773","312210214","313149502","313455800","313097750","313711558","313197758","314640459","313266256","313549743","313575136","314743840","314888074","314815226","315015370","315033498","315038828","314950684","315426668","315225615","315668103","315981647","316110394","315976878","316167337","316185487","316577642","316586106","316591007","317924173","316461128","318157062","316575398","318206638","316607563","317847358","318299773","318182441","318606159","318623386","318531456","318676046","318591567","318833431","318752151","318935418","318815107","319568887","320713084","319069597","321716011","322258914","322508391","320769938","322558552","320878762","322580895","322311143","322391541","322791070","322506718","322809823","322860800","322648858","322896069","322732637","322918681","322960618","322930686","323046078","323047928","323406777","323414490","323542902","323536409","324049196","324086529","324116508","324090737","324119007","324095439","324096031","324176320","324262021","324209709","324264548","324253319","324896083","324415785","325048528","324639814","325053361","325057131","324837830","325091213","324861400","325155018","324895069","325192441","325102069","325249522","325141059","325333854","325146934","325338077","325370609","325281202","325423978","325326767","325465359","325326775",
    //       "325622728","325888741","326889300","326324985","326396462","328596911","329027874","332489160","329032544","336436951","332390061","341045094","341305779","345210876","91","9608","15201","20238","20248","20233","20236","21221","21223","21235","21237","21279","21220","21720","22258","22806","22800","22801","23044","23038","23039","24133","24138","24329","24332","24333","24534","24537","24547","25654","25663","26035","26036","26649","26652","27407","30067","30071","30073","30756","30764","32195","34356","34360","34363","34543","36010","36014","36021","37016","37024","37178","37718","37969","39202","39413","39569","39784","39836","39791","39885","39833","39892","40057","40716","40795","41592","41596","41982","42162","42373","43517","43729","43730","44072","44463","44465","44498","44514","44808","44814","44947","45329","45334","45328","45764","46044","46654","46709","46686","46985","47011","47077","47186","47185","47314","47533","47537","47526","47528","47739","47741","49306","49324","49310","49665","60406","60798","60800","60801","61127","61124","61297","61567","11875283","16777666","21528468","21716097","21612841","21696976","21972401","22792899","23365638","23501737","25647108","26492389","27132976","27337179","27938604","28019891","29626504","31829328","32337370","33086281","33289711","33888512","34826487","36193399","36368835","36421204","37110871","38026274","38152047","38193959","38806238","39367289","40615551","40913956","43152404","43442268","52678885","54979380","55964258","57889446","61238960","64975451","66672940","200177731","200516219","200513927","200546646","201041548","201447968","201634391","203041462","203043054","203112966","203133533","203206578","203424767","203562954","203784251","204023824","204102024","204223945","204277495","204393623","204534762","204646434","204647010","204647036","204670632","205357007","205375074","205377682","205659386","206099376","206111312","206190548","206207573","206208738","206243958","206268070","206307464","206400046","206438467","206566473","206731036","206733834","206740219","206742512","206752925","206824948","206828345","206862013","206875577","206949216","206962920","207064486","207065475","207111139","207139478","207140252","207140377","207146804","207145517","207148206","207257643","207261975","207319138","207321654","207323791","207342353","207343930","207344433","207347139","207347378","207403981","207460965","207506718","207559642","207560418","207648916","207691346","207692476","207806266","207816919","207817222","207822925","207831850","207842618","207955741","207963323","207963505","207970997","207986621","207988312","207986282","208093476","208093450","208094094","208096073","208099648","208124586","208177048","208179234","208178756","208231852","208378802","208482596","208496794","208567271","208739177","208728741","208813873","208820027","208823955","208969121","209001718","209118124","209215250","209279306","209307438","209326602","209356591","209399492","209426147","209454727","209450378","209507235","209613520","211423306","211470703","211490578","211528740","211746342","211824156","212036404","212046692","212118962","212121313","212122634","212158513","212222129","212282297","212283204","300055845","300356292","300623832","302670476","302760780","302797139","303739338","304833346","304834633","305363723","305489312","307988428","308191147","308229822","308410687","310649595","311367866","312084726","312132129","312186356","312556459","312518137","312567423","312581903","312611890","313206864","313256141","313316945","313389678","314408741","314618919","314622754","314618885","314662347","314817743","314840059","314849118","314888389","314888520","314908377","314909912","315012039","315012930","315014159","315014498","315078329","315080598","315136812","315120410","315238105","315288779","315311886","315343657","315384784","315404194","315404319","315445353","315467944","315500561","315503664","315555375","315519611","315556480","315584243","315596981","315597070","315597336","315608018","315633198","315631176","315665034","315708842","315714642","315745927","315774364","315908525","315907675","315923342","315962803","316074889","316129386","316165414","316213362","316232321","316287887","316322775","316385616","316391739","316392018","316416494","316485267","316526508","317047553","317544641","317740066","317812436","317893626","318210127","318216538","318260940","318286382","318290418","318323607","318331014","318403326","318483013","318483518","318526522","318603586","318648243","318692027","318715778","318751864","318753696","318789070","318789146","318789450","318877560","318885332","318934437","318951753","318959558","318991247","320521362","322274226","322259862","322384389","322406273","322409574","322444381","322646662","322720749","322740986","323050047","323054965","323832642","323882654","323941062","324151927","324251016","324626704","327055745","327097515","327118360","327150306","326962982","327029948","328775960","332506534","332356674","332650852","345350045","345407456","130182","130046","130004","130026","130013","130022","28244432","32121170","130133","34823625","56259864","56740707","208249201","301388831","302659081","322505777","37535","32739443","200925907","205842453","206462665","206883803","207259268","207354523","208610691","209061753","209071141","211999487","302564836","308066588","314717257"
    //     ]} }).toArray();
    let users = await database.collection('users').find( {'employeeData.companyId': 
    { 
         $in: [ObjectId("5db68616e876cc0ca872d00a")] 
    } } ).toArray();
    let newStateUsers = [];
    for (let j = 0; j < users.length; j++) {
        let forms = await database.collection('forms').find({'formState':"new",'formShnatMas':"2020",'employeeId':users[j]._id,'companyId':ObjectId("5db68616e876cc0ca872d00a")}).toArray();
        if(forms && forms.length > 0){
            newStateUsers.push(users[j]);
        }
    }    

    console.log(`${newStateUsers.length} user with state new found`);

    let i;
    for (i = 0; i < newStateUsers.length; i++) {
        console.log(`UPDATED: the user ${newStateUsers[i].userName}`);
        await database.collection('users').updateOne({_id:newStateUsers[i]._id}, {
            $set: {'isFirstEntrance':true,'password' : 'C5xXuEZEQH4Rm1XnaMLbAw2VuvUo'},
            $unset: {'resetPasswordExpires':"",}
        });
    }
    console.log(`${i+1} users were updated`)
    console.log("DONE");
}

let traverseForms  = async (database)=>{
    let forms = await database.collection('forms').find({}).toArray();
    let cnt = 0;
    for (let i = 0; i < forms.length; i++) {
        let formDataObj = JSON.parse(forms[i].formData);
        if(formDataObj && formDataObj.inputYeshuvMezake){
                console.log(`${forms[i]._id} updated with city code ${formDataObj.inputYeshuvMezake}`);
                ++cnt;
        }
    }
    console.log(cnt);
}

let showUserTowns = async (database)=>{
    let users = await database.collection('users').find( {'employeeData.companyId':ObjectId("5c4d59247f7bdc088cca1eed")}).toArray();
    let i;
    let cnt = 0;
    let cityName = "XXXO";
    for (i = 0; i < users.length; i++) {
        if(!users[i].employeeData.addressData.city || users[i].employeeData.addressData.city == null || users[i].employeeData.addressData.city == "null" || isNaN(users[i].employeeData.addressData.city) ){
            cityName = "XXX";
        }else{
            let cities = await database.collection('cities').find({}).toArray();
            if(users[i].employeeData.addressData && users[i].employeeData.addressData.city){
                let cityObj = cities.find(c=>c.cityCode == users[i].employeeData.addressData.city);
                if(cityObj){
                    cityName = cityObj.cityName;
                }else{
                    cityName = "XXXZ";
                }
            }else{
                cityName = "XXXY";
            }
        }
        console.log(`userName: ${users[i].userName} , workerNumber:${users[i].externalId}, city: ${cityName}`);
        fs.appendFileSync('userTowns.txt',`userName: ${users[i].userName} , workerNumber:${users[i].externalId}, city: ${cityName} \n`);
        cnt++;
    }
    fs.appendFileSync('userTowns.txt',`------------------------------------------------------------------- \n`);
    fs.appendFileSync('userTowns.txt',`${cnt} users found \n`);
    console.log(`${cnt} users found`);

}

let asyncStam =  async ()=>{
    return "gops";
}

let setUserToActive = async (database)=>{
    let cnt = 0;
    let externalUserIds = ["28477909","300760360","53413787","23023369","27240548","22459564","323444190","29054418","25654443","23610942"
    ,"328765755","311995260","314413659","321058695","315829655","21689245","68221431","316877885","328784749","53317798","312697956",
    "56139793","22350193","23368913","314732710","204166698","203151485","31849185","57932022","55695688","57090136","312794837",
    "316458298","59592543","43222256","59776542","26169128","51773679","68737097","39427497","66609181","37404191","207309378","58874645",
    "37230471","317332625","32033821","36437093","201165461","204321301","50983428","43051291","209162981","38740387","28412146","37467917"
    ,"208077610","23195688","328754502","10412948","205888076","308027440","327453825","205752702","58292954","22635759","314481565",
    "300988961","23798911","81069098","208076851","327282620","310849435","200739381","303884340","205507973","66360561","204422372",
    "316832658","38194718","313729337","38000832","206574816","318710597","319194403","337769731","323638585","309582310","340983303",
    "315666024","34040188","318459922","23124670","31793417","303966535","25387515","54056460","34509356","206902454","310339569",
    "207199340","209097799","319055836","209278944","40353278","306199381","345121040","300047115","24822439","312072002","312872427",
    "307290072","58185141","208043000","63258768","201497492","17033366","34901892","309644003","315012005","65333296","318716974",
    "304385776","25642786","316047158","58248089","69172591","204470843","33383837","28859205","314789231","203580568","316696632",
    "319168670","322182130","207222316","310938527","207165309","46006573","14604300","26538249","314520453","316772375","81078008",
    "303150320","310290747","80968654","311849731","204199368","312039902","22280937","203276597","324646538","40163073","305787590",
    "208594218","313061053","43196153","38113049","324560895","54633409","317573616","308332659","69804813","14486070","54372560",
    "308367580","306446360","305011041","309135465","337602213","310501135","313707267","318687977","323089052","309585545","336315122",
    "328475603","61277208","34239376","327256681","61212320","15790587","22158513","57175408","209246719","205358229","319522363",
    "31505993","316056878","207253246","204135081","29583812","336358726","307077594","37558145","310689864","333829414","40278061",
    "310831904","323806281","57139610","328723481","53482022","24100596","28397271","323605923","316761139","43044270","328671540"];

    let users = await database.collection('users').find({'employeeData.companyId':ObjectId("5db68616e876cc0ca872d00a"),
        externalId: { $in: externalUserIds} }).toArray();
    console.log(`${users.length} users found`);
    for (let i = 0; i < users.length; i++) {  
        if(users[i].employeeData.isEmployeeActive == false){
            await database.collection('users').updateOne({_id:users[i]._id}, {$set: {'employeeData.isEmployeeActive':true}});
            console.log(`${users[i].userName} activated`);
            fs.appendFileSync(`${users[i].userName} activated`);
            cnt++;
        } 
    }
    console.log(`DONE ${cnt} workers have been activated`);
}

let copyFormToUser = async (database)=>{
    let forms = await database.collection('forms').find( {formShnatMas:"2020",formState: { $in: ["aproved","pendingSigned"]},companyId:ObjectId("5de3602d3603ea130c59b1e5")}).toArray();
    let k;
    for (k = 0; k < forms.length; k++) {
        let user = await database.collection('users').findOne( {'_id':forms[k].employeeId});
        try{
            updateUserWithFormData(user,forms[k],database);
        }catch(e){
            console.log(`Err: ${e}`);
        }
    }
    console.log(`DONE with ${k} users updated from forms`)
}

let findLockedUsersInState = async (database)=>{
    let count = 0;
    let forms = await database.collection('forms').find( {formShnatMas:"2020",formState: { $in: ["draft"]},companyId:ObjectId("5db68616e876cc0ca872d00a")}).toArray();
    for (let k = 0; k < forms.length; k++) {
        let user = await database.collection('users').findOne( {'_id':forms[k].employeeId,'employeeData.isEmployeeActive':false});
        if(user){
            console.log(`${user.userName}`);
            fs.appendFileSync('userSCountForDraftForms.txt',`${user.userName} users \n`);
            count++;
        }
      
    }
    fs.appendFileSync('userSCountForDraftForms.txt','-------------------------------------------------------------------------- \n');
    fs.appendFileSync('userSCountForDraftForms.txt',`${count} users found \n`);
    console.log(`Done`)
   
}

let findSmsLogPerCompany = async (database)=>{
    let companies = await database.collection('company').find( {}).toArray();
    let beforeDate = new Date(2020,0,1,0,0,0);
    let aftereDate = new Date(2020,4,26,0,0,0);
    for (let c = 0; c < companies.length; c++) {
        let companyLogs = await database.collection('CompanyLog').find({companyId:companies[c]._id,"updateDate" : { $gte : beforeDate },"updateDate" : { $lte : aftereDate }}).toArray();
        if(companyLogs.length > 0){
            let sum = companyLogs.map((a,b)=>a.smsData.smsCount);
            let tmp = sum;
            let ssmsSum = companyLogs.reduce((total, currentValue) => {
                return total + currentValue.smsData.smsCount;
            }, 0);
            console.log(`processing company code ${companies[c].companyCode}`)
            fs.appendFileSync('smsCount.txt',`company:${companies[c].name} sms count:${ssmsSum} between ${beforeDate} and ${aftereDate} \n`);
        }
    }
    console.log(`DONE`);
}

let findAprovedUserData = async (database)=>{
    let forms = await database.collection('forms').find( {formShnatMas:"2020",formState: { 
        $in: ["aproved"]
    },
        companyId:ObjectId("5dc7b3a53603ea130c59a725")
    }).toArray();

    let j;
    for (j = 0; j < forms.length; j++) {
        let employeeId = forms[j].employeeId;
        let user = await database.collection('users').findOne( {_id:employeeId,'employeeData.isEmployeeActive':true});
        if(user){
            let externalId = user.externalId ? user.externalId : "";
            let codeBank = user.employeeData.bankData && user.employeeData.bankData.codeBank?user.employeeData.bankData.codeBank:"";
            let branchBank = user.employeeData.bankData && user.employeeData.bankData.codeBranchBank ? user.employeeData.bankData.codeBranchBank :"";
            let bankAccount = user.employeeData.bankData  && user.employeeData.bankData.bankAccount ? user.employeeData.bankData.bankAccount : "";
            console.log(`${employeeId} proccessed`);
            fs.appendFileSync('aprovedUsersData.csv',`${externalId},${codeBank},${branchBank},${bankAccount} \n`);
        }
      
    }
    console.log(`DONE ${j} users`);
}

let findFormStatesinCompany = async (database)=>{
    let company = await database.collection('company').find( {}).toArray();
    fs.appendFileSync('formsStateCompany.txt',`------------------------------------------------------------------- \n`);
    fs.appendFileSync('formsStateCompany.txt',`${company.length} companies found \n`);
    for (let k = 0; k < company.length; k++) {
        console.log('formsStateCompany.txt',`code: ${company[k].companyCode} proccessed \n`);
        fs.appendFileSync('formsStateCompany.txt',`------------------------------------------------------------------- \n`);
        fs.appendFileSync('formsStateCompany.txt',`company name: ${company[k].name} code: ${company[k].companyCode} \n`);
        let users = await database.collection('users').find( {'employeeData.companyId':company[k]._id,'employeeData.isEmployeeActive':true}).toArray();
        let userIdsArr = users.map(id=>id._id);
        let forms = await database.collection('forms').find( {formShnatMas:"2020",formState: { 
            $in: ["draft","new","aproved","archived","pendingHR","pendingEMP","pendingSigned"]
        },
            employeeId:{$in:userIdsArr},
            companyId:company[k]._id,
        }).toArray();

        fs.appendFileSync('formsStateCompany.txt',`users ammount: ${users.length} \n`);
        fs.appendFileSync('formsStateCompany.txt',`opened forms ammount  ${forms.length} \n`);
        let result= _.chain(forms)
        .groupBy('formState')
        .map((group)=> {
            return {
                state:group[0].formState,
                count:group.length
            };
        }).value();
       
        if(users.length > forms.length){
            let indexNew = result.findIndex(r=>r.state === "new");
            let nonRegNewCount = users.length - forms.length; 
            if(indexNew >= 0){
                result[indexNew].count += nonRegNewCount;
            }else{
                result.push({state:"new",count:nonRegNewCount});
            }
        }
        for (let j = 0; j < result.length; j++) {
            switch(result[j].state) {
                case "draft":
                    fs.appendFileSync('formsStateCompany.txt',`מולאו חלקית  ${result[j].count} \n`);
                break;
                case "new":
                    fs.appendFileSync('formsStateCompany.txt',`ממתינים למילוי  ${result[j].count} \n`);
                break;
                case "aproved":
                    fs.appendFileSync('formsStateCompany.txt',`סיום תהליך  ${result[j].count} \n`);
                break;  
                case "archived":
                    fs.appendFileSync('formsStateCompany.txt',`ארכיון  ${result[j].count} \n`);
                break;  
                case "pendingHR":
                    fs.appendFileSync('formsStateCompany.txt',`ממתינים לאישור  ${result[j].count} \n`);
                break;  
                case "pendingEMP":
                    fs.appendFileSync('formsStateCompany.txt',`ממתינים לתיקון  ${result[j].count} \n`);
                break;  
                case "pendingSigned":
                    fs.appendFileSync('formsStateCompany.txt',`ממתינים לחיתום  ${result[j].count} \n`);
                break;  
                default:
                // code block
            }
        }
        let tmp = result;
    }
    console.log("DONE");
}

let updateUserWithFormData = async (user,form,database)=>{
    console.log(`entering  updateUserWithFormData method`);
    let request = { };
    let formDataObj = JSON.parse(form.formData);
    if(!formDataObj){
            return;
    }
    let address = {
        city: formDataObj.city? formDataObj.city : "",
        street: formDataObj.street ? formDataObj.street : "",
        streetNumber: formDataObj.streetNumber ? formDataObj.streetNumber : "",
        zipCode: formDataObj.zipCode ? formDataObj.zipCode : ""
      };
  
      let partnerData = {
        firstName: formDataObj.mateFirstName ? formDataObj.mateFirstName : '',
        lastName: formDataObj.mateLastName ? formDataObj.mateLastName : '',
        isWorking: formDataObj.mateSaleryDeclarations ? formDataObj.mateSaleryDeclarations : '',
        birthDate: formDataObj.mateBirtDate ? formDataObj.mateBirtDate : '',
        idNum: formDataObj.mateIdName ? formDataObj.mateIdName : '',
        immigrationDate: formDataObj.mateImmigrationDate ? formDataObj.mateImmigrationDate : '',
      }

      let bankData = {
        bankAccount :  formDataObj.bankAccount ? formDataObj.bankAccount : '',
        codeBank    : formDataObj.bankCode ? formDataObj.bankCode : '',
        codeBranchBank : formDataObj.codeBranchBank ? formDataObj.codeBranchBank : '',
      }
      
      let empData = {
        addressData: address,
        partnerData: partnerData,
        firstName: formDataObj.firstname,
        medicName: formDataObj.medicName,
        lastName: formDataObj.lastName,
        gender: formDataObj.gender,
        materialState: formDataObj.materialState,
        itemRows: formDataObj.itemRows,
        email: formDataObj.email,
        birthDate: formDataObj.birthDate,
        startWorkingDate: formDataObj.startWorkingDate,
        cellphoneNumber: formDataObj.cellPhoneNumber,
        phoneNumber: formDataObj.phoneNumber,
        bankData: bankData
      };
      Object.assign(request, { employeeData: empData });
      let emplData = _.assignIn(
        user.employeeData,
        request.employeeData
      );
      try{
        await database.collection('users').updateOne({_id:user._id}, {$set: {'employeeData':emplData}});
        console.log(`user : ${user.userName} updated from form `);
      }catch(err){
        console.log(`Err: ${err}`);
      }
}

let unlockUsers = async (database)=>{
    let i;
    let cnt = 0;
    let users = await database.collection('users').find( {'employeeData.companyId':ObjectId("5db68616e876cc0ca872d00a")}).toArray();
    for (i = 0; i < users.length; i++) {
        if(users[i].loginAttempts == 10){
            await database.collection('users').updateOne({_id:users[i]._id}, {$set: {'loginAttempts':0}});
            console.log(`${users[i].userName} unlocked`);
            cnt++;
        }
    }
    console.log(`DONE ${cnt} workers have been released`);
}

let swapStrNum =  async (database)=>{
    let users = await database.collection('users').find( {'employeeData.companyId':ObjectId("5c4fe6373dfed7128cbb8eaf")}).toArray();
    let i;
    let cnt = 0;
    for (i = 0; i < users.length; i++) {
        if(users[i].employeeData.addressData && users[i].employeeData.addressData.streetNumber){
            if(users[i].employeeData.addressData.streetNumber.includes("\\")){
                let newStreetNum = users[i].employeeData.addressData.streetNumber.replace(/\\/g, "/");
                await database.collection('users').updateOne({_id:users[i]._id}, {$set: {'employeeData.addressData.streetNumber':newStreetNum}});
                console.log(`userName: ${users[i].userName} with double slash replaced`);
                cnt++;
            }
        }
    }
    console.log(`DONE ${cnt} workers with double slash in street number was found`);
}

let updTaarichThilatAvoda =  async (database)=>{
    let users = await database.collection('users').find( {'employeeData.companyId':ObjectId("5db68616e876cc0ca872d00a"),externalId: { $in: 
        [
     
        ]} 
    }).toArray();
    let StWrkDate  = new Date(2020, 0, 1);
    let i = 0;
    let j = 0;
    for (i = 0; i < users.length; i++) {
        if(users[i].employeeData.addressData && users[i].employeeData.addressData.streetNumber){
                await database.collection('users').updateOne({_id:users[i]._id}, {$set: {'employeeData.startWorkingDate':StWrkDate},},{"upsert": true});
                console.log(`${users[i]._id} was updated`);
                let forms = await database.collection('forms').find({'employeeId':users[i]._id,"formShnatMas":"2020"}).toArray();
               
                for (j = 0; j < forms.length; j++) {
                    let formDataObj = JSON.parse(forms[j].formData);
                    if(!formDataObj){
                        continue;
                    }
                    var utcDate = new Date(Date.UTC(2020, 0, 1));
                    formDataObj.startWorkingDate = utcDate;
                    let res;
                    try{
                      
                        let strFData = JSON.stringify(formDataObj);
                        res = await database.collection('forms').updateOne({_id:forms[j]._id}, {$set: {'formData': strFData}});
                    let p = res;
                    }catch(err){
                        let p;
                        p = err;
                    }
                 
                
                }
        }
    }
    console.log(`${i} users updated`);
    console.log(`${j} forms updated`);
}

let deleteUsersBankData =  async (database)=>{
    // let i;
    // let cnt = 0;
    // let users = await database.collection('users').find( {'employeeData.companyId':ObjectId("5db68616e876cc0ca872d00a")}).toArray();
    // for (i = 0; i < users.length; i++) {
    //     let forms = await database.collection('forms').find({employeeId:users[i]._id}).toArray();
    //     if(!forms || forms.length == 0){
    //         if(users[i].employeeData.bankData){
    //             if(users[i].employeeData.bankData.codeBranchBank){
    //                 await database.collection('users').updateOne({_id:users[i]._id},{$set:{'employeeData.bankData.codeBranchBank':""}});
    //             }
    //             if(users[i].employeeData.bankData.codeBank){
    //                 await database.collection('users').updateOne({_id:users[i]._id},{$set:{'employeeData.bankData.codeBank':""}});
    //             }
    //             if(users[i].employeeData.bankData.bankAccount){
    //                 await database.collection('users').updateOne({_id:users[i]._id},{$set:{'employeeData.bankData.bankAccount':""}});
    //             }
    //             console.log(`${users[i].userName} bank data deleted`);
              
    //         }
    //         continue;
    //     }else{
    //         if(forms.)
    //     }
       
        // if(users[i].loginAttempts == 10){
        //     await database.collection('users').updateOne({_id:users[i]._id}, {$set: {'loginAttempts':0}});
        //     console.log(`${users[i].userName} unlocked`);
        //     cnt++;
        // }
    //}
    console.log(`DONE ${cnt} workers have been released`);
}

let isValidNumberTown = async (database)=>{
    let users = await database.collection('users').find( {'employeeData.companyId':ObjectId("5c4d59247f7bdc088cca1eed")}).toArray();
    let i;
    let cnt = 0;
    for (i = 0; i < users.length; i++) {
        if(!users[i].employeeData.addressData.city || users[i].employeeData.addressData.city == null || users[i].employeeData.addressData.city == "null" || isNaN(users[i].employeeData.addressData.city) ){
            console.log(`${users[i].userName} problematic \n`);
            fs.appendFileSync('problematicCities.txt',`${users[i].userName} problematic \n`);
            cnt++;
        }
        if(users[i].userName== "022843908"){
            let p = 0;
        }
        let forms = await database.collection('forms').find({'employeeId':users[i]._id,"formShnatMas":"2020"}).toArray();
        let j;
        for (j = 0; j < forms.length; j++) {
            let form = forms[j];

            if(form){
             //   let formDataObj = JSON.parse(form.formData);
                // if(!formDataObj.city || formDataObj.city == null || formDataObj.city == "null" || isNaN(formDataObj.city) ){
                //     console.log(`${formDataObj.username} problematic form in ${form.formShnatMas} city is : ${formDataObj.city} \n`);
                //     fs.appendFileSync('problematicCities.txt',`${users[i].userName} problematic form in ${form.formShnatMas} city is : ${formDataObj.city} \n`);
                //     cnt++;
                // }
            }
        }
    }
    fs.appendFileSync('problematicCities.txt',`--------------------------------------------------------------- \n`);
    fs.appendFileSync('problematicCities.txt',`${cnt} forms found \n`);

}

let findUserNamesOfCompany = async (database)=>{  
    let users = await database.collection('users').find({'employeeData.companyId':ObjectId("5db68616e876cc0ca872d00a")}).toArray();
    let userNamesArr = [];
    let i = 0;
    for (i = 0; i < users.length; i++) {
        console.log("writing user:" + users[i].userName);
        fs.appendFileSync('userNames.txt',`${users[i].userName} OR `);
        userNamesArr.push(users[i].userName);
    }
    console.log(`${i} users found`);
    console.log("starting to copy ...");
    
    let j;
    let count = 0;
    for (j = 0; j < userNamesArr.length; j++) {
        let path = `${UPLOADS_PATH}/${userNamesArr[j]}`;
        let newPath = `${UPLOADS_PATH}/shuferSal`;
        if(fs.existsSync(path)){
            try {
                await fsE.ensureDir(newPath);
              } catch (err) {
                console.error(err)
              }
            try {
                let uPath = `${newPath}/${userNamesArr[j]}`
                try {
                    await fsE.ensureDir(uPath);
                  } catch (err) {
                    console.error(err)
                  }
                await fsE.copy(path, uPath);
                count++;
                console.log(`${count} copied`)
            }catch(err){
                console.error(err);
            }
            //fsE
        }
    }
    console.log(`${count} folders copied`);
}

let deleteCompany = async (database)=>{  
 // let companyIdArr = ["5be1981cdac5ad0ff4b1c836","5c179b55ca8f8d045cf874dc"];
    let companyIdArr = await database.collection('company').find({companyCode : { $nin: [ "9998","9996"] }}).toArray();
    if(companyIdArr && companyIdArr.length > 0){
        companyIdArr = companyIdArr.map(id=>id._id+"");
    }
    //companyIdArr = [ObjectId("5c61488f5188950b9c8e629b")];
    
    for (let i = 0; i < companyIdArr.length; i++) {
        try{
        await database.collection('company').deleteMany({'_id':ObjectId(companyIdArr[i])});
        await database.collection('forms').deleteMany({'companyId':ObjectId(companyIdArr[i])});
        await database.collection('hpnumbers').deleteMany({'companyId':ObjectId(companyIdArr[i])});
        await database.collection('pirteytatchaverots').deleteMany({'_id':companyIdArr[i]});
        await database.collection('users').deleteMany({'employeeData.companyId':ObjectId(companyIdArr[i])});
        await database.collection('locations').deleteMany({'_id':ObjectId(companyIdArr[i])});
        await database.collection('pitzul2').deleteMany({'_id':ObjectId(companyIdArr[i])});
        await database.collection('rolegroups').deleteMany({'_id':ObjectId(companyIdArr[i])});
        await database.collection('signedformsfiles').deleteMany({'_id':ObjectId(companyIdArr[i])});
        await database.collection('userrolegroups').deleteMany({'_id':ObjectId(companyIdArr[i])});
        await database.collection('userroles').deleteMany({'_id':companyIdArr[i]});
        }catch(err){
            console.error(err);
        }
        console.log(`deleted all company ${companyIdArr[i]}`);
    }
    console.log(`DONE`);
}

let compareSavedFilesFolders = async (database)=>{
    //shufersal
    let forms = await database.collection('forms').find( {companyId:ObjectId("5db68616e876cc0ca872d00a")}).toArray();
    for (let k = 0; k < forms.length; k++) {
        //let formDataObj = JSON.parse(forms[k].formData);
        let users = await database.collection('users').find( {'_id':forms[k].employeeId}).toArray();
        let i;
        for (i = 0; i < users.length; i++) {
        //    console.log(`user: ${users[i].userName} proccessed`);
            let hNumberId = users[i].employeeData.hpNumberId ? users[i].employeeData.hpNumberId : users[i].employeeData.hpnumberId;
            let path = `${UPLOADS_PATH}/${users[i].userName}/${users[i]._id}/${users[i].employeeData.tikNikuimId}/${hNumberId}`
            let company = await database.collection('company').findOne({'_id':ObjectId(users[i].employeeData.companyId)}); 
            path += `/${company.name.replace(/[|&;$%@"<>()+,]/g, "")}`;
            
            let filesattachments = await database.collection('filesattachments').find({'formId':forms[k]._id}).toArray();
       //     console.log(`going to doCompare(${"filesattachments"},${path})`);
            await doCompare(filesattachments,path,forms[k]);     
        }
    }
    console.log("DONE");
}

const orderReccentFiles = (dir) =>{
  let res = fs.readdirSync(dir)
    .filter(f => fs.lstatSync(f).isFile())
    .map(file => ({ file, mtime: fs.lstatSync(file).mtime }))
    .sort((a, b) => b.mtime.getTime() - a.mtime.getTime());

    return res;
}

const getMostRecentFile = (dir) => {
  const files = orderReccentFiles(dir);
  return files.length ? files[0] : undefined;
};

let getLatestFile = (dirpath) => {

    // Check if dirpath exist or not right here
  
    let latest;
  
    const files = fs.readdirSync(dirpath);
    files.forEach(filename => {
      // Get the stat
      const stat = fs.lstatSync(path2.join(dirpath, filename));
      // Pass if it is a directory
      if (stat.isDirectory())
        return;
  
      // latest default to first file
      if (!latest) {
        latest = {filename, mtime: stat.mtime};
        return;
      }
      // update latest if mtime is greater than the current latest
      if (stat.mtime > latest.mtime) {
        latest.filename = filename;
        latest.mtime = stat.mtime;
      }
    });
  
    return latest.filename;
  }

  let getMostRecentFileName = (dir)=> {
    var files = fs.readdirSync(dir);

    // use underscore for max()
    return _.max(files, function (f) {
        var fullpath = path.join(dir, f);

        // ctime = creation time is used
        // replace with mtime for modification time
        return fs.statSync(fullpath).ctime;
    });
}

let doCompare = async (filesattachments,path,form)=>{
    for (let i = 0; i < filesattachments.length; i++) {
        let fullPath = `${path}/${filesattachments[i].attachmentType}`;
        console.log(`checking(${fullPath})`);
        if (fs.existsSync(fullPath)) {

            let mostRecentFile = fileNameByForm(form,filesattachments[i].attachmentType);
            if(!mostRecentFile){
                fs.appendFileSync('logCompareChen.txt',`no file found at path : ${path} \n`);
                console.log(`no file found at path : ${path}`);
                continue;
            }
            let joinedPAth = path2.join(fullPath, mostRecentFile)
                if (fs.existsSync(joinedPAth)) {
                    //file exists
                    let fData = fs.readFileSync(joinedPAth);
                    let isEqual = Buffer.compare(fData, filesattachments[i].fileData.buffer);
                    if(isEqual !== 0){
                        fs.appendFileSync('logCompareChen.txt',`file   ${mostRecentFile}   are different at path: ${fullPath} \n`);
                        console.log(`files are different at path: ${path}`);
                    }else{
                        fs.appendFileSync('validChen.txt',`file VALID   ${mostRecentFile}  : ${fullPath} \n`);
                    }
                   
            }
        }else{
            console.log(`no directory was found at path: ${path} `);
            fs.appendFileSync('logCompareChen.txt',`no directory was found at path: ${path} \n`);
        }
    
    }
}

let fileNameByForm  = (form,attachmentType)=>{
   let fileName = undefined;
   if(form.formData){
        let formDataObj = JSON.parse(form.formData);
        switch(attachmentType) {
            case "teudat_zeut":
                if(formDataObj.zeutFileText){
                    fileName = formDataObj.zeutFileText
                }
            break;
            case "sefah_children":
                if(formDataObj.childSefahFileText){
                    fileName = formDataObj.childSefahFileText
                }
            break;
            case "exWife_shuma_certificate":
                if(formDataObj.prudaFileText){
                    fileName = formDataObj.prudaFileText
                }
            break;  
            case "tlushSahar":
                if(formDataObj.tlushileText){
                    fileName = formDataObj.tlushileText
                }
            break;  
            case "cripple_certificate":
                if(formDataObj.neheIshurFileText){
                    fileName = formDataObj.neheIshurFileText
                }
            break;  
            case "doc_1312a":
                if(formDataObj.ishurReshut1312FileText){
                    fileName = formDataObj.ishurReshut1312FileText
                }
            break;  
            case "teudatOle":
                if(formDataObj.teudatOleFileText){
                    fileName = formDataObj.teudatOleFileText
                }
            break;  
            case "teudatToshavHozer":
                if(formDataObj.teudatToshavHozerFileText){
                    fileName = formDataObj.teudatToshavHozerFileText
                }
            break;  
            case "benZugNehe":
                if(formDataObj.crippleMateFileText){
                    fileName = formDataObj.crippleMateFileText
                }
            break;  
            case "divorceCertificate":
                if(formDataObj.divorceCertificateText){
                    fileName = formDataObj.divorceCertificateText
                }
            break;  
            case "mezonotCertificate":
                if(formDataObj.mezonotCertificaText){
                    fileName = formDataObj.mezonotCertificaText
                }
            break;  
            case "siumSherutCertificate":
                if(formDataObj.siumSherutCertificateText){
                    fileName = formDataObj.siumSherutCertificateText
                }
            break;  
            case "tofes119":
                if(formDataObj.tofes119Text){
                    fileName = formDataObj.tofes119Text
                }
            break;  
            case "graduateCertificate":
                if(formDataObj.graduateCertificateText){
                    fileName = formDataObj.graduateCertificateText
                }
            break;  
            case "bankVerification":
                if(formDataObj.bankVerificationText){
                    fileName = formDataObj.bankVerificationText
                }
            break;  
            case "noIncomeProve":
                if(formDataObj.noIncomeProveText){
                    fileName = formDataObj.noIncomeProveText
                }
            break;  
            case "AproveShumaClerk":
                if(formDataObj.AproveShumaClerkUpText){
                    fileName = formDataObj.AproveShumaClerkUpText
                }
            break;  
            case "ishurGimlatChild":
                if(formDataObj.gimlatChildFileText){
                    fileName = formDataObj.gimlatChildFileText
                }
            break;  
            default:
            // code block
        }
    }

    return fileName;
}

let correctDamagedFiles = async (database)=>{
    let company = await database.collection('company').find( {_id:ObjectId("5db68616e876cc0ca872d00a")}).toArray();
    for (let k = 0; k < company.length; k++) {
        let users = await database.collection('users').find( {'employeeData.companyId':company[k]._id}).toArray();
        let i;
        for (i = 0; i < users.length; i++) {
        // console.log(`user: ${users[i].userName} proccessed`);

            let hNumberId = users[i].employeeData.hpNumberId ? users[i].employeeData.hpNumberId : users[i].employeeData.hpnumberId;
            let path = `${UPLOADS_PATH}/${users[i].userName}/${users[i]._id}/${users[i].employeeData.tikNikuimId}/${hNumberId}`
            let company = await database.collection('company').findOne({'_id':ObjectId(users[i].employeeData.companyId)}); 
            path += `/${company.name.replace(/[|&;$%@"<>()+,]/g, "")}`;


            let forms = await database.collection('forms').find({'employeeId':users[i]._id,"formShnatMas" : "2020"}).toArray();
            let j;
            for (j = 0; j < forms.length; j++) {
                let form = forms[j];
                parseFormForFileChk(form,path);
            }
        }
        if(company[k].companyCode){
            console.log(`${GLOBAL_COUNT} not valid in ${company[k].companyCode} \n`);
        }
        if(company[k].name){
            fs.appendFileSync('logAttachmentsCmp.txt',`${GLOBAL_COUNT} not valid in ${company[k].name} \n`);
        }
        GLOBAL_COUNT = 0;
    }
    console.log("DONE");
}

// let correctDamagedFiles = async (database)=>{
//     let users = await database.collection('users').find( {'employeeData.companyId':ObjectId("5c4828acca20d50f3c2a7465")}).toArray();
//     let i;
//     for (i = 0; i < users.length; i++) {
//         let hNumberId = users[i].employeeData.hpNumberId ? users[i].employeeData.hpNumberId : users[i].employeeData.hpnumberId;
//         let path = `${UPLOADS_PATH}/${users[i].userName}/${users[i]._id}/${users[i].employeeData.tikNikuimId}/${hNumberId}`
//         let company = await database.collection('company').findOne({'_id':ObjectId(users[i].employeeData.companyId)}); 
//         path += `/${company.name.replace(/[|&;$%@"<>()+,]/g, "")}`;

//         let forms = await database.collection('forms').find({'employeeId':users[i]._id}).toArray();
//         let j;
//         for (j = 0; j < forms.length; j++) {
//             let form = forms[j];
//             parseFormForFileChk(form,path);
//         }
//     }
//     console.log(`${GLOBAL_COUNT} documents were changed`)  
//     console.log("DONE");
//   }
  

let parseFormForFileChk = async (formObj,path) =>{
    if(formObj){
        let formDataObj = JSON.parse(formObj.formData);
        if(formDataObj.zeutFileText){
            checkOrCorrectFile("teudat_zeut",path,formDataObj.zeutFileText);
        }
        if(formDataObj.childSefahFileText){
            checkOrCorrectFile("sefah_children",path,formDataObj.childSefahFileText);
        }
        if(formDataObj.prudaFileText){
            checkOrCorrectFile("exWife_shuma_certificate",path,formDataObj.prudaFileText);
        }
        if(formDataObj.tlushileText){
            checkOrCorrectFile("tlushSahar",path,formDataObj.tlushileText);
        }
        if(formDataObj.neheIshurFileText){
            checkOrCorrectFile("cripple_certificate",path,formDataObj.neheIshurFileText);
        }
        if(formDataObj.ishurReshut1312FileText){
            checkOrCorrectFile("doc_1312a",path,formDataObj.ishurReshut1312FileText);
        }
        if(formDataObj.teudatOleFileText){
            checkOrCorrectFile("teudatOle",path,formDataObj.teudatOleFileText);
        }
        if(formDataObj.teudatToshavHozerFileText){
            checkOrCorrectFile("teudatToshavHozer",path,formDataObj.teudatToshavHozerFileText);
        }
        if(formDataObj.crippleMateFileText){
            checkOrCorrectFile("benZugNehe",path,formDataObj.crippleMateFileText);
        }
        if(formDataObj.divorceCertificateText){
            checkOrCorrectFile("divorceCertificate",path,formDataObj.divorceCertificateText);
        }
        if(formDataObj.mezonotCertificaText){
            checkOrCorrectFile("mezonotCertificate",path,formDataObj.mezonotCertificaText);
        }
        if(formDataObj.siumSherutCertificateText){
            checkOrCorrectFile("siumSherutCertificate",path,formDataObj.siumSherutCertificateText);
        }
        if(formDataObj.tofes119Text){
            checkOrCorrectFile("tofes119",path,formDataObj.tofes119Text);
        }
        if(formDataObj.graduateCertificateText){
            checkOrCorrectFile("graduateCertificate",path,formDataObj.graduateCertificateText);
        }
        if(formDataObj.bankVerificationText){
            checkOrCorrectFile("bankVerification",path,formDataObj.bankVerificationText);
        }
        if(formDataObj.noIncomeProveText){
            checkOrCorrectFile("noIncomeProve",path,formDataObj.noIncomeProveText);
        }
        if(formDataObj.AproveShumaClerkUpText){
            checkOrCorrectFile("AproveShumaClerk",path,formDataObj.AproveShumaClerkUpText);
        }
        if(formDataObj.gimlatChildFileText){
            checkOrCorrectFile("ishurGimlatChild",path,formDataObj.gimlatChildFileText);
        }
        if(formDataObj.gimlatChildFileText){
            checkOrCorrectFile("ishurGimlatChild",path,formDataObj.gimlatChildFileText);
        }
    }
}

let checkOrCorrectFile = async (folderName,path,actualFileName) =>{
    let fullPath = `${path}/${folderName}`;
    if (fs.existsSync(fullPath)) {
        fs.readdir(fullPath, async (err, items) => {
         //   console.log(items);
            for (var i=0; i<items.length; i++) {
                // console.log(`folder file: ${items[i]}`);
                // console.log(`actual file: ${actualFileName}`);
               
                if(items[i] !== actualFileName){
                    if(actualFileName != "2020"){
                        let files = items.filter(a=>a.includes(actualFileName)&& a!==actualFileName);
                        if(files.length === 0){
                            files = items.filter(a=> actualFileName.includes(a)&& a!==actualFileName);
                        }
                        //Only for not found/////////
                        let notFound = items.filter(a=>a.includes(actualFileName));
                        if(notFound.length === 0){
                            notFound = items.filter(a=> actualFileName.includes(a));
                        }
                        ///////////////////////
                        if(files && files.length === 1 && files[0] != actualFileName){
                            if(argv.correctDamagedFiles){
                                fs.renameSync(`${fullPath}/${files[0]}`, `${fullPath}/${actualFileName}`);
                                console.log(`${files[0]} renamed to ${actualFileName} at ${fullPath}`);
                                fs.appendFileSync('logAttachments.txt',`${files[0]} renamed to ${actualFileName} at ${fullPath} \n`);
                            }else{
                                console.log(`will be renamed ${++GLOBAL_COUNT}`);
                            }
                           
                        }
                    //    if(argv.correctDamagedFiles){
                            if(notFound && notFound.length === 0){
                                fs.appendFileSync('logAttachments.txt',`No files found for file ${actualFileName} at  ${fullPath} \n`);
                            }
                            if(files && files.length > 1){
                                fs.appendFileSync('logAttachments.txt',`more than one files found for file ${actualFileName} at  ${fullPath} \n`);
                            }
                  //      }
                    }else{
                        fs.appendFileSync('logAttachments.txt',`file name is ${actualFileName} full path:  ${fullPath}/${actualFileName} \n`);
                    }
                }
            }
        });
    }
}
/////////////////////////////////////////////////////////
//connect to HG_Tofes and main BL Main function
/////////////////////////////////////////////////////////
(async () =>{
    let host = choseHost();
    let p = await asyncStam();
    let filePath = './cities.xlsx';
    MongoClient.connect(`mongodb://${userName}:${pass}@${host}:27017/${dbName}`, 
    { 
        useNewUrlParser: true,
        useUnifiedTopology: true 
    }, 
    async (err, db) => { 
        if(err){
            console.log(err);
        }else{
            if(db){
                let database = db.db('HG_Tofes');
                console.log(chalk.green("connected"));
                if (argv.findDbl) {
                    await copyUserAttachments(database);
                    console.log(chalk.green("attachments were coppied."));
                    console.log(chalk.bold.green("dicsonnecting....\n"));
                    process.exit();
                } 
                if (argv.showDbl) {
                    let result = await findDoubleUsers(database);
                    if(result && result.length > 0){
                        logInfoDouble(result);
                    }
                    console.log(chalk.bold.green("dicsonnecting....\n"));
                    process.exit();
                }
                if (argv.showdmgchld) {
                    let usersDmgChld = await findDamagedChildren(database,'users');
                    if(usersDmgChld && usersDmgChld.length > 0){
                        console.log(usersDmgChld);
                        console.log(`users ammount ${usersDmgChld.length}`);
                    }
                    process.exit();
                }
                //Fix damaged children in an itemRows array in signup
                if (argv.fixdmgchld) {
                    let usersDmgChld = await findDamagedChildren(database,'users');
                    if(usersDmgChld && usersDmgChld.length > 0){
                        console.log(`users to fix ammount ${usersDmgChld.length}`);
                        console.log(`fixing damaged children`);
                        const col = database.collection('users');
                     
                        for(let i = 0; i< usersDmgChld.length;i++){
                            let iRows = usersDmgChld[i].employeeData.itemRows;
                            delete usersDmgChld[i].employeeData.itemRows._t;
                            let newItemRows = iRows._v;
                            delete usersDmgChld[i].employeeData.itemRows._v;
                            usersDmgChld[i].employeeData.itemRows = newItemRows;
                            let id = usersDmgChld[i]._id;
                            await col.updateOne({_id:id}, {$set: {'employeeData.itemRows':usersDmgChld[i].employeeData.itemRows }});
                            console.log(usersDmgChld[i].employeeData.itemRows);
                            console.log("FIXED");
                        }
                    }
                    process.exit();
                }
                if(argv.showCity || argv.fixCity || argv.distinctCities){
                    parseExcel(filePath,database);
                }
                if(argv.chngeToCode){
                    fixUsers(database);
                }
                if(argv.fixTextForms || argv.fixIashuvMezake){
                    fixTextForms(database);
                }
                if(argv.fixCodeForms || argv.fixIashuvMizakeCodes){
                    fixFormsCodes(database);
                }
                if(argv.traverseForms){
                    traverseForms(database);
                }
                if(argv.showWrongMates){
                    showWrongMates(database);
                }
                if(argv.updateWrongMates){
                    updateWrongMates(database);
                }
                if(argv.initFirstMessage){
                    initFirstMessage(database);
                }
                if(argv.eml){
                    eml(database);
                }
                if(argv.removeFirstWorker){
                    removeFirstWorker(database);
                }
                if(argv.initPass){
                    initPass(database);
                }
                if(argv.correctDamagedFiles || argv.viewDamagedFiles){
                    correctDamagedFiles(database);
                }
                if(argv.isValidNumberTown){
                    isValidNumberTown(database);
                }
                if(argv.showUserTowns){
                    showUserTowns(database);
                }
                if(argv.unlockUsers){
                    unlockUsers(database);
                }
                if(argv.swapStrNum){
                    swapStrNum(database);
                }
                if(argv.findUserNamesOfCompany){
                    findUserNamesOfCompany(database);
                }    
                if(argv.compareSavedFilesFolders){
                    compareSavedFilesFolders(database);
                } 
                if(argv.deleteCompany){
                    deleteCompany(database);
                }
                if(argv.setUserToActive){
                    setUserToActive(database);
                }
                if(argv.copyFormToUser){
                    copyFormToUser(database);
                }
                if(argv.findLockedUsersInState){
                    findLockedUsersInState(database);
                }
                if(argv.findFormStatesinCompany){
                    findFormStatesinCompany(database);
                }
                if(argv.findSmsLogPerCompany){
                    findSmsLogPerCompany(database);
                }
                if(argv.findAprovedUserData){
                    findAprovedUserData(database);
                }
                if(argv.updTaarichThilatAvoda){
                    updTaarichThilatAvoda(database);
                }
                if(argv.deleteUsersByExtId){
                    deleteUsersByExtId(database);
                }
                if(argv.deleteUsersByStatus){
                    deleteUsersByStatus(database);
                }
                if(argv.stringCities){
                    stringCities(database);
                }
                if(argv.stringFormCities){
                    stringFormCities(database);
                }
                
            }else{
                console.log("no db");
            }
        }        
    });
})();
///////////////////////////////////////////////////////////////////////////////////
//Main business for finding double users and copying their attachments when needed
//////////////////////////////////////////////////////////////////////////////////
let copyUserAttachments = async (database)=>{
    // let database = db.db('HG_Tofes');
    //get double users , same userName different companies
    let result = await findDoubleUsers(database);
    if(result && result.length > 0){
        let userNameArray = result.map(u=>u._id);
        logInfoDouble(result,userNameArray);
        for (let i = 0; i <= userNameArray.length - 1; i++){
            let objPath = [];   
            let users = await database.collection('users').find({userName:userNameArray[i]}).toArray();
            let uLength = users.length - 1;
            for(let j = 0; j <= uLength ; j++){
                let hNumberId = users[j].employeeData.hpNumberId ? users[j].employeeData.hpNumberId : users[j].employeeData.hpnumberId;
                let path = `../${userNameArray[i]}/${users[j]._id}/${users[j].employeeData.tikNikuimId}/${hNumberId}`
                let company = await database.collection('company').findOne({'_id':ObjectId(users[j].employeeData.companyId)}); 
                path += `/${company.name}`;
                console.log(chalk.blue(path));       
                objPath.push(path.replace(/[|&;$%@"<>()+,]/g, "")); 
                //TO DO if needed for more than 2 
                if(uLength === j){
                    if (!fs.existsSync(objPath[0])){                   
                        shell.mkdir('-p', objPath[0]); 
                        if(fs.existsSync(objPath[1])){
                            coppyDir(objPath[1],objPath[0]);
                        }     
                    }else{
                        if (!fs.existsSync(objPath[1])){     
                            shell.mkdir('-p', objPath[1]); 
                            if(fs.existsSync(objPath[0])){
                                coppyDir(objPath[0],objPath[1]);
                            }    
                        }
                    }
                }
            }
        }
    }else{
        console.log("there is no double users!")
    }
}
//////////////////////////////////////////////////////////////////////////////////////////
//Find damaged children in an itemRows array in signup
/////////////////////////////////////////////////////////////////////////////////////////
let findDamagedChildren = async (database,collectionName)=>{
    return  await database.collection(collectionName).find({'employeeData.itemRows._v':{$exists:true}}).toArray();
}

//////////////////////////////////////////////////////////////////////////////////////////
//Find users with the same userName that exists in other company , for now only two times
/////////////////////////////////////////////////////////////////////////////////////////
let findDoubleUsers = async (database)=>{
    return  await database.collection('users').aggregate(
        {"$group" : { "_id": "$userName", "count": { "$sum": 1 } } },
        {"$match": {"_id" :{ "$ne" : null } , "count" : {"$gt": 1} } }, 
        {"$project": {"userName" : "$_id", "_id" : 0} }
    ).toArray();
}
//////////////////////////////////////////////////////////////////////////////////////////
//copy function//////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
let coppyDir = (source,dist)=>{
    copydir.sync(source, dist, {
        utimes: true,  // keep add time and modify time
        mode: true,    // keep file mode
        cover: true    // cover file when exists, default is true
    });        
}
//////////////////////////////////////////////////////////////////////////////////////////
///Log info//////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
let logInfoDouble = (result,userNameArray = undefined)=>{
    console.log(chalk.cyan(`there are ${result.length} double users`));
    if(!userNameArray){
        userNameArray = result.map(u=>u._id);
    }
    console.log(chalk.yellow("array of double usernames:"),userNameArray);
}
//////////////////////////////////////////////////////////////////////////////////////////
let stringCities = async (database)=>{
    let users = await database.collection('users').find( {'employeeData.companyId':ObjectId("5c4fe6373dfed7128cbb8eaf")}).toArray();
    let cities = await database.collection('cities').find({}).toArray();
    let i;
    let cnt = 0;
    let fixedCount = 0;
    for (i = 0; i < users.length; i++) {
        if(users[i].employeeData.addressData && users[i].employeeData.addressData.city ){
            if(isNaN(users[i].employeeData.addressData.city)){
                let cit = users[i].employeeData.addressData.city;

                fs.appendFileSync('stringCities.txt',`${users[i].userName} city: ${cit} \n`);
                cnt++;
                let ctyIndx = cities.findIndex(c=>c.cityName === cit);
                if(ctyIndx >= 0){
                    let cityCode = cities[ctyIndx].cityCode;
                 //   await database.collection('users').updateOne({_id:users[i]._id}, {$set: {'employeeData.addressData.city':cityCode }});
                    console.log(`${users[i].userName} fixed \n`);
                    fixedCount++;
                }
            }
  
        }
    }
    fs.appendFileSync('stringCities.txt',`--------------------------------------------------------------- \n`);
    fs.appendFileSync('stringCities.txt',`${cnt} wrong textual cities found \n`);
    fs.appendFileSync('stringCities.txt',`${fixedCount} wrong textual cities were fixed \n`);

}
///////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
let stringFormCities = async (database)=>{
    let forms = await database.collection('forms').find( {'companyId':ObjectId("5c4fe6373dfed7128cbb8eaf")}).toArray();
    let cities = await database.collection('cities').find({}).toArray();
    let i;
    let cnt = 0;
    let fixedCount = 0;
    let formCity = "";
    let formDataObj;
    for (i = 0; i < forms.length; i++) {
        if(forms[i].formData){
            formDataObj = JSON.parse(forms[i].formData);
            if(formDataObj.city){
                formCity = formDataObj.city;
            }else{
                continue;
            }
        }else{
            continue;
        }
        if(formCity){
            if(isNaN(formCity)){
                let cit = formCity;
                fs.appendFileSync('stringFormsCities.txt',`FormId: ${forms[i]._id}   ${formDataObj.username} city: ${cit} \n`);
                cnt++;
                let ctyIndx = cities.findIndex(c=>c.cityName === cit);
                if(ctyIndx >= 0){
                    let cityCode = cities[ctyIndx].cityCode;
                    formDataObj.city = cityCode;
                    let strFData = JSON.stringify(formDataObj);
                    await database.collection('forms').updateOne({_id:forms[i]._id}, {$set: {'formData': strFData}});
                    console.log(`${forms[i]._id} fixed \n`);
                    fs.appendFileSync('stringFormsFixLogCities.txt',`${forms[i]._id} for userName: ${formDataObj.username} fixed \n`);
                    fixedCount++;
                }
            }
  
        }
    }
    fs.appendFileSync('stringFormsCities.txt',`--------------------------------------------------------------- \n`);
    fs.appendFileSync('stringFormsCities.txt',`${cnt} wrong textual cities found \n`);
    fs.appendFileSync('stringFormsCities.txt',`${fixedCount} wrong textual cities were fixed \n`);

}
//////////////////////////////////////////////////////////////////////////////
 let parseExcel = async (filePath,database)=>{
    let workbook = XLSX.readFile(filePath,{cellDates: true});
    let mapperWorkBook =  workbook.Sheets.Sheet1;
    let sheet_name_list = workbook.SheetNames;
    let foundUsers = [];
    let report = {};
    report.addedData = [];
    report.rejectedData = [];
    let parsedXLS = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[sheet_name_list[0]]); 
    let cnt =  parsedXLS.length + 1;
    let counter = 0;
    for (let i = parsedXLS.length - 1; i >= 0; i -= 1) {
        let cityCode    =  parsedXLS[i]["קוד"];
        let cityName    =  parsedXLS[i]["תאור"];
        let users = await database.collection('users').find({'employeeData.addressData.city':cityName}).toArray();
        foundUsers = _.concat(foundUsers,users);
        console.log(`proccessing employee number:${++counter}`);
    }
    console.log(foundUsers.length);
    let foundUserIds = foundUsers.map(u=>u._id);
    let problematicCitiesUsers = await database.collection('users').find({'_id':{$nin:foundUserIds}}).toArray();
    console.log(`${problematicCitiesUsers.length} problematic users found`);
    let stream = fs.createWriteStream("usersInvalidCities.txt");
    counter = 0;
    stream.once('open', async(fd)=> {
        for (let i = 0; i < problematicCitiesUsers.length; i++) {
            if(problematicCitiesUsers[i].employeeData && problematicCitiesUsers[i].employeeData.addressData && problematicCitiesUsers[i].employeeData.addressData.city){
                //trim all cities with spaces
                if(argv.fixCity){
                    let trimedVal = problematicCitiesUsers[i].employeeData.addressData.city.trim();
                    switch(trimedVal) {
                        case "פתח תקוה":
                            trimedVal = "פתח תקווה";
                          break;
                        case "תל אביב":
                        case "תל אביב-יפ":
                            trimedVal = "תל אביב-יפו";  
                          break;
                          case "מודיעין עילי":
                            trimedVal = "מודיעין עילית";  
                          break;
                          case "קרית אונו":
                            trimedVal = "קריית אונו";  
                          break;
                          case "קרית ביאליק":
                            trimedVal = "קריית ביאליק";  
                          break;
                          case "קרית גת":
                            trimedVal = "קריית גת";  
                          break;
                          case "הרצלייה":
                            trimedVal = "הרצליה";  
                          break;
                          case 'פ"ת':
                                trimedVal = "פתח תקווה";  
                          break;
                          case "אום אל-פחם":
                                trimedVal = "אום אל פחם";  
                          break;
                          case "נהרייה":
                                trimedVal = "נהריה";  
                          break;
                          case "פרדס חנה":
                                trimedVal = "פרדס חנה-כרכור";  
                          break;
                          case 'ראשל"צ':
                          case 'ראשון לציו':
                                trimedVal = "ראשון לציון";  
                          break;
                          case "גני תקוה":
                                trimedVal = "גני תקווה";  
                          break;
                          case "קרית מוצקין":
                                trimedVal = "קריית מוצקין";  
                          break;
                          case "קרית מלאכי":
                                trimedVal = "קריית מלאכי";  
                          break;
                          case "קרית אתא":
                                trimedVal = "קריית אתא";  
                          break;
                          case "קרית ים":
                                trimedVal = "קריית ים";  
                          break;
                          case "מודעין עילית":
                                trimedVal = "מודיעין עילית";  
                          break;
                          case 'ב"ב':
                                trimedVal = "בני ברק";  
                          break;
                          case 'דיר אל אסד':
                                trimedVal = "דיר אל-אסד";  
                          break;
                          case "מודעין עילית":
                                trimedVal = "מודיעין עילית";  
                          break;
                          case 'בת-ים':
                                trimedVal = "בת ים";  
                          break;
                        default:
                                
                          // code block
                      }
                    await database.collection('users').updateOne({_id:problematicCitiesUsers[i]._id}, {$set: {'employeeData.addressData.city':trimedVal }});
                    console.log("updated");
                }else if(argv.showCity){
                    stream.write(`The users are ${problematicCitiesUsers[i]._id}\n`);
                    stream.write(`The cities are ${problematicCitiesUsers[i].employeeData.addressData.city}\n`);
                    console.log(`writing to file number:${++counter}`);
                }
            }
        }
        stream.end();
        if(argv.distinctCities){
            let problematicNames = problematicCitiesUsers.map(p=>p.employeeData && p.employeeData.addressData && p.employeeData.addressData.city);
            //let uniqueProb = [...new Set(problematicNames)];
            problematicNames = problematicNames.filter(function (el) {
                return el != null && el != "";
            });
            const result = _.values(_.groupBy(problematicNames)).map(d => ({city: d[0], count: d.length}));
            let stream2 = fs.createWriteStream("distinctCities.txt");
            stream2.once('open', async(fd)=> { 
                for (let i = 0; i < result.length; i++) {
                    stream2.write(`City:${result[i].city}. Count:${result[i].count}\n`);
                }
                stream2.end();
            })
        }
        console.log("DONE");
    });
 }
///////////////////-----------------------/////////////////////////////////////////////////



